[2025-07-15T19:33:43.149777] === New Cycle ===
Building for debugging...
[0/33] Write swift-version-24593BA9C3E375BF.txt
error: emit-module command failed with exit code 1 (use -v to see invocation)
[2/40] Emitting module PlannerServer
/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:11:17: error: cannot find type 'HTTPKernel' in scope
 9 | final class SimpleHTTPRuntime {
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   |                 `- error: cannot find type 'HTTPKernel' in scope
12 |     let port: Int32
13 |     private var serverFD: Int32 = -1

/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:15:18: error: cannot find type 'HTTPKernel' in scope
13 |     private var serverFD: Int32 = -1
14 | 
15 |     init(kernel: HTTPKernel, port: Int32 = 8080) {
   |                  `- error: cannot find type 'HTTPKernel' in scope
16 |         self.kernel = kernel
17 |         self.port = port

/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:66:48: error: cannot find type 'HTTPRequest' in scope
64 |     }
65 | 
66 |     private func parseRequest(_ data: Data) -> HTTPRequest? {
   |                                                `- error: cannot find type 'HTTPRequest' in scope
67 |         guard let string = String(data: data, encoding: .utf8) else { return nil }
68 |         let parts = string.components(separatedBy: "\r\n\r\n")

/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:78:36: error: cannot find type 'HTTPResponse' in scope
76 |     }
77 | 
78 |     private func serialize(_ resp: HTTPResponse) -> Data {
   |                                    `- error: cannot find type 'HTTPResponse' in scope
79 |         var text = "HTTP/1.1 \(resp.status) OK\r\n"
80 |         text += "Content-Length: \(resp.body.count)\r\n"

/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:88:14: error: cannot find 'HTTPKernel' in scope
86 | }
87 | 
88 | let kernel = HTTPKernel()
   |              `- error: cannot find 'HTTPKernel' in scope
89 | do {
90 |     let runtime = SimpleHTTPRuntime(kernel: kernel, port: 8080)
error: emit-module command failed with exit code 1 (use -v to see invocation)
error: emit-module command failed with exit code 1 (use -v to see invocation)
[3/40] Emitting module LLMGatewayServer
/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:11:17: error: cannot find type 'HTTPKernel' in scope
 9 | final class SimpleHTTPRuntime {
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   |                 `- error: cannot find type 'HTTPKernel' in scope
12 |     let port: Int32
13 |     private var serverFD: Int32 = -1

/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:15:18: error: cannot find type 'HTTPKernel' in scope
13 |     private var serverFD: Int32 = -1
14 | 
15 |     init(kernel: HTTPKernel, port: Int32 = 8080) {
   |                  `- error: cannot find type 'HTTPKernel' in scope
16 |         self.kernel = kernel
17 |         self.port = port

/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:66:48: error: cannot find type 'HTTPRequest' in scope
64 |     }
65 | 
66 |     private func parseRequest(_ data: Data) -> HTTPRequest? {
   |                                                `- error: cannot find type 'HTTPRequest' in scope
67 |         guard let string = String(data: data, encoding: .utf8) else { return nil }
68 |         let parts = string.components(separatedBy: "\r\n\r\n")

/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:78:36: error: cannot find type 'HTTPResponse' in scope
76 |     }
77 | 
78 |     private func serialize(_ resp: HTTPResponse) -> Data {
   |                                    `- error: cannot find type 'HTTPResponse' in scope
79 |         var text = "HTTP/1.1 \(resp.status) OK\r\n"
80 |         text += "Content-Length: \(resp.body.count)\r\n"

/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:88:14: error: cannot find 'HTTPKernel' in scope
86 | }
87 | 
88 | let kernel = HTTPKernel()
   |              `- error: cannot find 'HTTPKernel' in scope
89 | do {
90 |     let runtime = SimpleHTTPRuntime(kernel: kernel, port: 8080)
[4/40] Emitting module BaselineAwarenessServer
/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:11:17: error: cannot find type 'HTTPKernel' in scope
  9 | final class SimpleHTTPRuntime {
 10 |     enum RuntimeError: Error { case socket, bind, listen }
 11 |     let kernel: HTTPKernel
    |                 `- error: cannot find type 'HTTPKernel' in scope
 12 |     let port: Int32
 13 |     private var serverFD: Int32 = -1

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:15:18: error: cannot find type 'HTTPKernel' in scope
 13 |     private var serverFD: Int32 = -1
 14 | 
 15 |     init(kernel: HTTPKernel, port: Int32 = 8080) {
    |                  `- error: cannot find type 'HTTPKernel' in scope
 16 |         self.kernel = kernel
 17 |         self.port = port

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:66:48: error: cannot find type 'HTTPRequest' in scope
 64 |     }
 65 | 
 66 |     private func parseRequest(_ data: Data) -> HTTPRequest? {
    |                                                `- error: cannot find type 'HTTPRequest' in scope
 67 |         guard let headerRange = data.range(of: Data("\r\n\r\n".utf8)) else { return nil }
 68 |         let headerData = data[..<headerRange.lowerBound]

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:89:36: error: cannot find type 'HTTPResponse' in scope
 87 |     }
 88 | 
 89 |     private func serialize(_ resp: HTTPResponse) -> Data {
    |                                    `- error: cannot find type 'HTTPResponse' in scope
 90 |         var text = "HTTP/1.1 \(resp.status) OK\r\n"
 91 |         for (k, v) in resp.headers { text += "\(k): \(v)\r\n" }

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:100:14: error: cannot find 'HTTPKernel' in scope
 98 | }
 99 | 
100 | let kernel = HTTPKernel()
    |              `- error: cannot find 'HTTPKernel' in scope
101 | 
102 | do {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:4:24: error: cannot find type 'HTTPKernel' in scope
 2 | 
 3 | public class HTTPServer: URLProtocol {
 4 |     static var kernel: HTTPKernel?
   |                        `- error: cannot find type 'HTTPKernel' in scope
 5 | 
 6 |     public static func register(kernel: HTTPKernel) {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:4:16: error: static property 'kernel' is not concurrency-safe because it is nonisolated global shared mutable state
 2 | 
 3 | public class HTTPServer: URLProtocol {
 4 |     static var kernel: HTTPKernel?
   |                |- error: static property 'kernel' is not concurrency-safe because it is nonisolated global shared mutable state
   |                |- note: convert 'kernel' to a 'let' constant to make 'Sendable' shared state immutable
   |                |- note: add '@MainActor' to make static property 'kernel' part of global actor 'MainActor'
   |                `- note: disable concurrency-safety checks if accesses are protected by an external synchronization mechanism
 5 | 
 6 |     public static func register(kernel: HTTPKernel) {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:6:41: error: cannot find type 'HTTPKernel' in scope
 4 |     static var kernel: HTTPKernel?
 5 | 
 6 |     public static func register(kernel: HTTPKernel) {
   |                                         `- error: cannot find type 'HTTPKernel' in scope
 7 |         self.kernel = kernel
 8 |         URLProtocol.registerClass(HTTPServer.self)

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:11:54: error: cannot find type 'URLRequest' in scope
 9 |     }
10 | 
11 |     public override class func canInit(with request: URLRequest) -> Bool {
   |                                                      `- error: cannot find type 'URLRequest' in scope
12 |         request.url?.host == "localhost"
13 |     }

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:15:77: error: cannot find type 'URLRequest' in scope
13 |     }
14 | 
15 |     public override class func canonicalRequest(for request: URLRequest) -> URLRequest { request }
   |                                                                             `- error: cannot find type 'URLRequest' in scope
16 | 
17 |     override public func startLoading() {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:15:62: error: cannot find type 'URLRequest' in scope
13 |     }
14 | 
15 |     public override class func canonicalRequest(for request: URLRequest) -> URLRequest { request }
   |                                                              `- error: cannot find type 'URLRequest' in scope
16 | 
17 |     override public func startLoading() {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:17:26: error: method does not override any method from its superclass
15 |     public override class func canonicalRequest(for request: URLRequest) -> URLRequest { request }
16 | 
17 |     override public func startLoading() {
   |                          `- error: method does not override any method from its superclass
18 |         guard let kernel = HTTPServer.kernel, let url = request.url else {
19 |             client?.urlProtocol(self, didFailWithError: URLError(.badServerResponse))

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:36:26: error: method does not override any method from its superclass
34 |     }
35 | 
36 |     override public func stopLoading() {}
   |                          `- error: method does not override any method from its superclass
37 | }
38 | 

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:3:26: error: 'URLProtocol' is unavailable: This type has moved to the FoundationNetworking module. Import that module to use it.
 1 | import Foundation
 2 | 
 3 | public class HTTPServer: URLProtocol {
   |                          `- error: 'URLProtocol' is unavailable: This type has moved to the FoundationNetworking module. Import that module to use it.
 4 |     static var kernel: HTTPKernel?
 5 | 

Foundation.URLProtocol:2:18: note: 'URLProtocol' has been explicitly marked unavailable here
1 | @available(*, unavailable, message: "This type has moved to the FoundationNetworking module. Import that module to use it.")
2 | public typealias URLProtocol = AnyObject
  |                  `- note: 'URLProtocol' has been explicitly marked unavailable here
[5/40] Compiling PlannerServer main.swift
/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:11:17: error: cannot find type 'HTTPKernel' in scope
 9 | final class SimpleHTTPRuntime {
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   |                 `- error: cannot find type 'HTTPKernel' in scope
12 |     let port: Int32
13 |     private var serverFD: Int32 = -1

/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:15:18: error: cannot find type 'HTTPKernel' in scope
13 |     private var serverFD: Int32 = -1
14 | 
15 |     init(kernel: HTTPKernel, port: Int32 = 8080) {
   |                  `- error: cannot find type 'HTTPKernel' in scope
16 |         self.kernel = kernel
17 |         self.port = port

/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:66:48: error: cannot find type 'HTTPRequest' in scope
64 |     }
65 | 
66 |     private func parseRequest(_ data: Data) -> HTTPRequest? {
   |                                                `- error: cannot find type 'HTTPRequest' in scope
67 |         guard let string = String(data: data, encoding: .utf8) else { return nil }
68 |         let parts = string.components(separatedBy: "\r\n\r\n")

/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:78:36: error: cannot find type 'HTTPResponse' in scope
76 |     }
77 | 
78 |     private func serialize(_ resp: HTTPResponse) -> Data {
   |                                    `- error: cannot find type 'HTTPResponse' in scope
79 |         var text = "HTTP/1.1 \(resp.status) OK\r\n"
80 |         text += "Content-Length: \(resp.body.count)\r\n"

/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:88:14: error: cannot find 'HTTPKernel' in scope
86 | }
87 | 
88 | let kernel = HTTPKernel()
   |              `- error: cannot find 'HTTPKernel' in scope
89 | do {
90 |     let runtime = SimpleHTTPRuntime(kernel: kernel, port: 8080)

/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:36:55: error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime?' in a '@Sendable' closure
 7 | #endif
 8 | 
 9 | final class SimpleHTTPRuntime {
   |             `- note: class 'SimpleHTTPRuntime' does not conform to the 'Sendable' protocol
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   :
34 |         guard bindResult >= 0 else { throw RuntimeError.bind }
35 |         guard listen(serverFD, 16) >= 0 else { throw RuntimeError.listen }
36 |         DispatchQueue.global().async { [weak self] in self?.acceptLoop() }
   |                                                       `- error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime?' in a '@Sendable' closure
37 |     }
38 | 

/srv/deploy/repos/fountainai/Generated/Server/planner/main.swift:46:21: error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime' in a '@Sendable' closure
 7 | #endif
 8 | 
 9 | final class SimpleHTTPRuntime {
   |             `- note: class 'SimpleHTTPRuntime' does not conform to the 'Sendable' protocol
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   :
44 |             if fd >= 0 {
45 |                 DispatchQueue.global().async {
46 |                     self.handle(fd: fd)
   |                     `- error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime' in a '@Sendable' closure
47 |                 }
48 |             }
error: emit-module command failed with exit code 1 (use -v to see invocation)
error: emit-module command failed with exit code 1 (use -v to see invocation)
[6/40] Emitting module BootstrapServer
/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:11:17: error: cannot find type 'HTTPKernel' in scope
 9 | final class SimpleHTTPRuntime {
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   |                 `- error: cannot find type 'HTTPKernel' in scope
12 |     let port: Int32
13 |     private var serverFD: Int32 = -1

/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:15:18: error: cannot find type 'HTTPKernel' in scope
13 |     private var serverFD: Int32 = -1
14 | 
15 |     init(kernel: HTTPKernel, port: Int32 = 8080) {
   |                  `- error: cannot find type 'HTTPKernel' in scope
16 |         self.kernel = kernel
17 |         self.port = port

/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:66:48: error: cannot find type 'HTTPRequest' in scope
64 |     }
65 | 
66 |     private func parseRequest(_ data: Data) -> HTTPRequest? {
   |                                                `- error: cannot find type 'HTTPRequest' in scope
67 |         guard let string = String(data: data, encoding: .utf8) else { return nil }
68 |         let parts = string.components(separatedBy: "\r\n\r\n")

/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:78:36: error: cannot find type 'HTTPResponse' in scope
76 |     }
77 | 
78 |     private func serialize(_ resp: HTTPResponse) -> Data {
   |                                    `- error: cannot find type 'HTTPResponse' in scope
79 |         var text = "HTTP/1.1 \(resp.status) OK\r\n"
80 |         text += "Content-Length: \(resp.body.count)\r\n"

/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:88:14: error: cannot find 'HTTPKernel' in scope
86 | }
87 | 
88 | let kernel = HTTPKernel()
   |              `- error: cannot find 'HTTPKernel' in scope
89 | do {
90 |     let runtime = SimpleHTTPRuntime(kernel: kernel, port: 8080)
[7/40] Emitting module PersistServer
/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:11:17: error: cannot find type 'HTTPKernel' in scope
 9 | final class SimpleHTTPRuntime {
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   |                 `- error: cannot find type 'HTTPKernel' in scope
12 |     let port: Int32
13 |     private var serverFD: Int32 = -1

/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:15:18: error: cannot find type 'HTTPKernel' in scope
13 |     private var serverFD: Int32 = -1
14 | 
15 |     init(kernel: HTTPKernel, port: Int32 = 8080) {
   |                  `- error: cannot find type 'HTTPKernel' in scope
16 |         self.kernel = kernel
17 |         self.port = port

/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:66:48: error: cannot find type 'HTTPRequest' in scope
64 |     }
65 | 
66 |     private func parseRequest(_ data: Data) -> HTTPRequest? {
   |                                                `- error: cannot find type 'HTTPRequest' in scope
67 |         guard let string = String(data: data, encoding: .utf8) else { return nil }
68 |         let parts = string.components(separatedBy: "\r\n\r\n")

/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:78:36: error: cannot find type 'HTTPResponse' in scope
76 |     }
77 | 
78 |     private func serialize(_ resp: HTTPResponse) -> Data {
   |                                    `- error: cannot find type 'HTTPResponse' in scope
79 |         var text = "HTTP/1.1 \(resp.status) OK\r\n"
80 |         text += "Content-Length: \(resp.body.count)\r\n"

/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:88:14: error: cannot find 'HTTPKernel' in scope
86 | }
87 | 
88 | let kernel = HTTPKernel()
   |              `- error: cannot find 'HTTPKernel' in scope
89 | do {
90 |     let runtime = SimpleHTTPRuntime(kernel: kernel, port: 8080)
[8/40] Compiling BootstrapServer main.swift
/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:11:17: error: cannot find type 'HTTPKernel' in scope
 9 | final class SimpleHTTPRuntime {
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   |                 `- error: cannot find type 'HTTPKernel' in scope
12 |     let port: Int32
13 |     private var serverFD: Int32 = -1

/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:15:18: error: cannot find type 'HTTPKernel' in scope
13 |     private var serverFD: Int32 = -1
14 | 
15 |     init(kernel: HTTPKernel, port: Int32 = 8080) {
   |                  `- error: cannot find type 'HTTPKernel' in scope
16 |         self.kernel = kernel
17 |         self.port = port

/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:66:48: error: cannot find type 'HTTPRequest' in scope
64 |     }
65 | 
66 |     private func parseRequest(_ data: Data) -> HTTPRequest? {
   |                                                `- error: cannot find type 'HTTPRequest' in scope
67 |         guard let string = String(data: data, encoding: .utf8) else { return nil }
68 |         let parts = string.components(separatedBy: "\r\n\r\n")

/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:78:36: error: cannot find type 'HTTPResponse' in scope
76 |     }
77 | 
78 |     private func serialize(_ resp: HTTPResponse) -> Data {
   |                                    `- error: cannot find type 'HTTPResponse' in scope
79 |         var text = "HTTP/1.1 \(resp.status) OK\r\n"
80 |         text += "Content-Length: \(resp.body.count)\r\n"

/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:88:14: error: cannot find 'HTTPKernel' in scope
86 | }
87 | 
88 | let kernel = HTTPKernel()
   |              `- error: cannot find 'HTTPKernel' in scope
89 | do {
90 |     let runtime = SimpleHTTPRuntime(kernel: kernel, port: 8080)

/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:36:55: error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime?' in a '@Sendable' closure
 7 | #endif
 8 | 
 9 | final class SimpleHTTPRuntime {
   |             `- note: class 'SimpleHTTPRuntime' does not conform to the 'Sendable' protocol
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   :
34 |         guard bindResult >= 0 else { throw RuntimeError.bind }
35 |         guard listen(serverFD, 16) >= 0 else { throw RuntimeError.listen }
36 |         DispatchQueue.global().async { [weak self] in self?.acceptLoop() }
   |                                                       `- error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime?' in a '@Sendable' closure
37 |     }
38 | 

/srv/deploy/repos/fountainai/Generated/Server/bootstrap/main.swift:46:21: error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime' in a '@Sendable' closure
 7 | #endif
 8 | 
 9 | final class SimpleHTTPRuntime {
   |             `- note: class 'SimpleHTTPRuntime' does not conform to the 'Sendable' protocol
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   :
44 |             if fd >= 0 {
45 |                 DispatchQueue.global().async {
46 |                     self.handle(fd: fd)
   |                     `- error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime' in a '@Sendable' closure
47 |                 }
48 |             }
[9/40] Compiling PersistServer main.swift
/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:11:17: error: cannot find type 'HTTPKernel' in scope
 9 | final class SimpleHTTPRuntime {
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   |                 `- error: cannot find type 'HTTPKernel' in scope
12 |     let port: Int32
13 |     private var serverFD: Int32 = -1

/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:15:18: error: cannot find type 'HTTPKernel' in scope
13 |     private var serverFD: Int32 = -1
14 | 
15 |     init(kernel: HTTPKernel, port: Int32 = 8080) {
   |                  `- error: cannot find type 'HTTPKernel' in scope
16 |         self.kernel = kernel
17 |         self.port = port

/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:66:48: error: cannot find type 'HTTPRequest' in scope
64 |     }
65 | 
66 |     private func parseRequest(_ data: Data) -> HTTPRequest? {
   |                                                `- error: cannot find type 'HTTPRequest' in scope
67 |         guard let string = String(data: data, encoding: .utf8) else { return nil }
68 |         let parts = string.components(separatedBy: "\r\n\r\n")

/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:78:36: error: cannot find type 'HTTPResponse' in scope
76 |     }
77 | 
78 |     private func serialize(_ resp: HTTPResponse) -> Data {
   |                                    `- error: cannot find type 'HTTPResponse' in scope
79 |         var text = "HTTP/1.1 \(resp.status) OK\r\n"
80 |         text += "Content-Length: \(resp.body.count)\r\n"

/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:88:14: error: cannot find 'HTTPKernel' in scope
86 | }
87 | 
88 | let kernel = HTTPKernel()
   |              `- error: cannot find 'HTTPKernel' in scope
89 | do {
90 |     let runtime = SimpleHTTPRuntime(kernel: kernel, port: 8080)

/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:36:55: error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime?' in a '@Sendable' closure
 7 | #endif
 8 | 
 9 | final class SimpleHTTPRuntime {
   |             `- note: class 'SimpleHTTPRuntime' does not conform to the 'Sendable' protocol
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   :
34 |         guard bindResult >= 0 else { throw RuntimeError.bind }
35 |         guard listen(serverFD, 16) >= 0 else { throw RuntimeError.listen }
36 |         DispatchQueue.global().async { [weak self] in self?.acceptLoop() }
   |                                                       `- error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime?' in a '@Sendable' closure
37 |     }
38 | 

/srv/deploy/repos/fountainai/Generated/Server/persist/main.swift:46:21: error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime' in a '@Sendable' closure
 7 | #endif
 8 | 
 9 | final class SimpleHTTPRuntime {
   |             `- note: class 'SimpleHTTPRuntime' does not conform to the 'Sendable' protocol
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   :
44 |             if fd >= 0 {
45 |                 DispatchQueue.global().async {
46 |                     self.handle(fd: fd)
   |                     `- error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime' in a '@Sendable' closure
47 |                 }
48 |             }
[10/40] Compiling BaselineAwarenessServer HTTPServer.swift
/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:4:24: error: cannot find type 'HTTPKernel' in scope
 2 | 
 3 | public class HTTPServer: URLProtocol {
 4 |     static var kernel: HTTPKernel?
   |                        `- error: cannot find type 'HTTPKernel' in scope
 5 | 
 6 |     public static func register(kernel: HTTPKernel) {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:4:16: error: static property 'kernel' is not concurrency-safe because it is nonisolated global shared mutable state
 2 | 
 3 | public class HTTPServer: URLProtocol {
 4 |     static var kernel: HTTPKernel?
   |                |- error: static property 'kernel' is not concurrency-safe because it is nonisolated global shared mutable state
   |                |- note: convert 'kernel' to a 'let' constant to make 'Sendable' shared state immutable
   |                |- note: add '@MainActor' to make static property 'kernel' part of global actor 'MainActor'
   |                `- note: disable concurrency-safety checks if accesses are protected by an external synchronization mechanism
 5 | 
 6 |     public static func register(kernel: HTTPKernel) {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:6:41: error: cannot find type 'HTTPKernel' in scope
 4 |     static var kernel: HTTPKernel?
 5 | 
 6 |     public static func register(kernel: HTTPKernel) {
   |                                         `- error: cannot find type 'HTTPKernel' in scope
 7 |         self.kernel = kernel
 8 |         URLProtocol.registerClass(HTTPServer.self)

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:11:54: error: cannot find type 'URLRequest' in scope
 9 |     }
10 | 
11 |     public override class func canInit(with request: URLRequest) -> Bool {
   |                                                      `- error: cannot find type 'URLRequest' in scope
12 |         request.url?.host == "localhost"
13 |     }

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:15:77: error: cannot find type 'URLRequest' in scope
13 |     }
14 | 
15 |     public override class func canonicalRequest(for request: URLRequest) -> URLRequest { request }
   |                                                                             `- error: cannot find type 'URLRequest' in scope
16 | 
17 |     override public func startLoading() {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:15:62: error: cannot find type 'URLRequest' in scope
13 |     }
14 | 
15 |     public override class func canonicalRequest(for request: URLRequest) -> URLRequest { request }
   |                                                              `- error: cannot find type 'URLRequest' in scope
16 | 
17 |     override public func startLoading() {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:17:26: error: method does not override any method from its superclass
15 |     public override class func canonicalRequest(for request: URLRequest) -> URLRequest { request }
16 | 
17 |     override public func startLoading() {
   |                          `- error: method does not override any method from its superclass
18 |         guard let kernel = HTTPServer.kernel, let url = request.url else {
19 |             client?.urlProtocol(self, didFailWithError: URLError(.badServerResponse))

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:36:26: error: method does not override any method from its superclass
34 |     }
35 | 
36 |     override public func stopLoading() {}
   |                          `- error: method does not override any method from its superclass
37 | }
38 | 

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:3:26: error: 'URLProtocol' is unavailable: This type has moved to the FoundationNetworking module. Import that module to use it.
 1 | import Foundation
 2 | 
 3 | public class HTTPServer: URLProtocol {
   |                          `- error: 'URLProtocol' is unavailable: This type has moved to the FoundationNetworking module. Import that module to use it.
 4 |     static var kernel: HTTPKernel?
 5 | 

Foundation.URLProtocol:2:18: note: 'URLProtocol' has been explicitly marked unavailable here
1 | @available(*, unavailable, message: "This type has moved to the FoundationNetworking module. Import that module to use it.")
2 | public typealias URLProtocol = AnyObject
  |                  `- note: 'URLProtocol' has been explicitly marked unavailable here

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:8:21: error: type 'URLProtocol' (aka 'AnyObject') has no member 'registerClass'
 6 |     public static func register(kernel: HTTPKernel) {
 7 |         self.kernel = kernel
 8 |         URLProtocol.registerClass(HTTPServer.self)
   |                     `- error: type 'URLProtocol' (aka 'AnyObject') has no member 'registerClass'
 9 |     }
10 | 

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:18:57: error: cannot find 'request' in scope
16 | 
17 |     override public func startLoading() {
18 |         guard let kernel = HTTPServer.kernel, let url = request.url else {
   |                                                         `- error: cannot find 'request' in scope
19 |             client?.urlProtocol(self, didFailWithError: URLError(.badServerResponse))
20 |             return

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:19:13: error: cannot find 'client' in scope
17 |     override public func startLoading() {
18 |         guard let kernel = HTTPServer.kernel, let url = request.url else {
19 |             client?.urlProtocol(self, didFailWithError: URLError(.badServerResponse))
   |             `- error: cannot find 'client' in scope
20 |             return
21 |         }

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:22:19: error: cannot find 'HTTPRequest' in scope
20 |             return
21 |         }
22 |         let req = HTTPRequest(method: request.httpMethod ?? "GET", path: url.path, headers: request.allHTTPHeaderFields ?? [:], body: request.httpBody ?? Data())
   |                   `- error: cannot find 'HTTPRequest' in scope
23 |         Task {
24 |             do {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:22:39: error: cannot find 'request' in scope
20 |             return
21 |         }
22 |         let req = HTTPRequest(method: request.httpMethod ?? "GET", path: url.path, headers: request.allHTTPHeaderFields ?? [:], body: request.httpBody ?? Data())
   |                                       `- error: cannot find 'request' in scope
23 |         Task {
24 |             do {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:22:93: error: cannot find 'request' in scope
20 |             return
21 |         }
22 |         let req = HTTPRequest(method: request.httpMethod ?? "GET", path: url.path, headers: request.allHTTPHeaderFields ?? [:], body: request.httpBody ?? Data())
   |                                                                                             `- error: cannot find 'request' in scope
23 |         Task {
24 |             do {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:22:135: error: cannot find 'request' in scope
20 |             return
21 |         }
22 |         let req = HTTPRequest(method: request.httpMethod ?? "GET", path: url.path, headers: request.allHTTPHeaderFields ?? [:], body: request.httpBody ?? Data())
   |                                                                                                                                       `- error: cannot find 'request' in scope
23 |         Task {
24 |             do {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:27:17: error: cannot find 'client' in scope
25 |                 let resp = try await kernel.handle(req)
26 |                 let httpResponse = HTTPURLResponse(url: url, statusCode: resp.status, httpVersion: "HTTP/1.1", headerFields: resp.headers)!
27 |                 client?.urlProtocol(self, didReceive: httpResponse, cacheStoragePolicy: .notAllowed)
   |                 `- error: cannot find 'client' in scope
28 |                 client?.urlProtocol(self, didLoad: resp.body)
29 |                 client?.urlProtocolDidFinishLoading(self)

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:28:17: error: cannot find 'client' in scope
26 |                 let httpResponse = HTTPURLResponse(url: url, statusCode: resp.status, httpVersion: "HTTP/1.1", headerFields: resp.headers)!
27 |                 client?.urlProtocol(self, didReceive: httpResponse, cacheStoragePolicy: .notAllowed)
28 |                 client?.urlProtocol(self, didLoad: resp.body)
   |                 `- error: cannot find 'client' in scope
29 |                 client?.urlProtocolDidFinishLoading(self)
30 |             } catch {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:29:17: error: cannot find 'client' in scope
27 |                 client?.urlProtocol(self, didReceive: httpResponse, cacheStoragePolicy: .notAllowed)
28 |                 client?.urlProtocol(self, didLoad: resp.body)
29 |                 client?.urlProtocolDidFinishLoading(self)
   |                 `- error: cannot find 'client' in scope
30 |             } catch {
31 |                 client?.urlProtocol(self, didFailWithError: error)

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/HTTPServer.swift:31:17: error: cannot find 'client' in scope
29 |                 client?.urlProtocolDidFinishLoading(self)
30 |             } catch {
31 |                 client?.urlProtocol(self, didFailWithError: error)
   |                 `- error: cannot find 'client' in scope
32 |             }
33 |         }
[11/40] Compiling BaselineAwarenessServer main.swift
/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:11:17: error: cannot find type 'HTTPKernel' in scope
  9 | final class SimpleHTTPRuntime {
 10 |     enum RuntimeError: Error { case socket, bind, listen }
 11 |     let kernel: HTTPKernel
    |                 `- error: cannot find type 'HTTPKernel' in scope
 12 |     let port: Int32
 13 |     private var serverFD: Int32 = -1

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:15:18: error: cannot find type 'HTTPKernel' in scope
 13 |     private var serverFD: Int32 = -1
 14 | 
 15 |     init(kernel: HTTPKernel, port: Int32 = 8080) {
    |                  `- error: cannot find type 'HTTPKernel' in scope
 16 |         self.kernel = kernel
 17 |         self.port = port

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:66:48: error: cannot find type 'HTTPRequest' in scope
 64 |     }
 65 | 
 66 |     private func parseRequest(_ data: Data) -> HTTPRequest? {
    |                                                `- error: cannot find type 'HTTPRequest' in scope
 67 |         guard let headerRange = data.range(of: Data("\r\n\r\n".utf8)) else { return nil }
 68 |         let headerData = data[..<headerRange.lowerBound]

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:89:36: error: cannot find type 'HTTPResponse' in scope
 87 |     }
 88 | 
 89 |     private func serialize(_ resp: HTTPResponse) -> Data {
    |                                    `- error: cannot find type 'HTTPResponse' in scope
 90 |         var text = "HTTP/1.1 \(resp.status) OK\r\n"
 91 |         for (k, v) in resp.headers { text += "\(k): \(v)\r\n" }

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:100:14: error: cannot find 'HTTPKernel' in scope
 98 | }
 99 | 
100 | let kernel = HTTPKernel()
    |              `- error: cannot find 'HTTPKernel' in scope
101 | 
102 | do {

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:36:55: error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime?' in a '@Sendable' closure
  7 | #endif
  8 | 
  9 | final class SimpleHTTPRuntime {
    |             `- note: class 'SimpleHTTPRuntime' does not conform to the 'Sendable' protocol
 10 |     enum RuntimeError: Error { case socket, bind, listen }
 11 |     let kernel: HTTPKernel
    :
 34 |         guard bindResult >= 0 else { throw RuntimeError.bind }
 35 |         guard listen(serverFD, 16) >= 0 else { throw RuntimeError.listen }
 36 |         DispatchQueue.global().async { [weak self] in self?.acceptLoop() }
    |                                                       `- error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime?' in a '@Sendable' closure
 37 |     }
 38 | 

/srv/deploy/repos/fountainai/Generated/Server/baseline-awareness/main.swift:46:21: error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime' in a '@Sendable' closure
  7 | #endif
  8 | 
  9 | final class SimpleHTTPRuntime {
    |             `- note: class 'SimpleHTTPRuntime' does not conform to the 'Sendable' protocol
 10 |     enum RuntimeError: Error { case socket, bind, listen }
 11 |     let kernel: HTTPKernel
    :
 44 |             if fd >= 0 {
 45 |                 DispatchQueue.global().async {
 46 |                     self.handle(fd: fd)
    |                     `- error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime' in a '@Sendable' closure
 47 |                 }
 48 |             }
/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:11:17: error: cannot find type 'HTTPKernel' in scope
 9 | final class SimpleHTTPRuntime {
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   |                 `- error: cannot find type 'HTTPKernel' in scope
12 |     let port: Int32
13 |     private var serverFD: Int32 = -1

/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:15:18: error: cannot find type 'HTTPKernel' in scope
13 |     private var serverFD: Int32 = -1
14 | 
15 |     init(kernel: HTTPKernel, port: Int32 = 8080) {
   |                  `- error: cannot find type 'HTTPKernel' in scope
16 |         self.kernel = kernel
17 |         self.port = port

/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:66:48: error: cannot find type 'HTTPRequest' in scope
64 |     }
65 | 
66 |     private func parseRequest(_ data: Data) -> HTTPRequest? {
   |                                                `- error: cannot find type 'HTTPRequest' in scope
67 |         guard let string = String(data: data, encoding: .utf8) else { return nil }
68 |         let parts = string.components(separatedBy: "\r\n\r\n")

/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:78:36: error: cannot find type 'HTTPResponse' in scope
76 |     }
77 | 
78 |     private func serialize(_ resp: HTTPResponse) -> Data {
   |                                    `- error: cannot find type 'HTTPResponse' in scope
79 |         var text = "HTTP/1.1 \(resp.status) OK\r\n"
80 |         text += "Content-Length: \(resp.body.count)\r\n"

/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:88:14: error: cannot find 'HTTPKernel' in scope
86 | }
87 | 
88 | let kernel = HTTPKernel()
   |              `- error: cannot find 'HTTPKernel' in scope
89 | do {
90 |     let runtime = SimpleHTTPRuntime(kernel: kernel, port: 8080)

/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:36:55: error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime?' in a '@Sendable' closure
 7 | #endif
 8 | 
 9 | final class SimpleHTTPRuntime {
   |             `- note: class 'SimpleHTTPRuntime' does not conform to the 'Sendable' protocol
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   :
34 |         guard bindResult >= 0 else { throw RuntimeError.bind }
35 |         guard listen(serverFD, 16) >= 0 else { throw RuntimeError.listen }
36 |         DispatchQueue.global().async { [weak self] in self?.acceptLoop() }
   |                                                       `- error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime?' in a '@Sendable' closure
37 |     }
38 | 

/srv/deploy/repos/fountainai/Generated/Server/llm-gateway/main.swift:46:21: error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime' in a '@Sendable' closure
 7 | #endif
 8 | 
 9 | final class SimpleHTTPRuntime {
   |             `- note: class 'SimpleHTTPRuntime' does not conform to the 'Sendable' protocol
10 |     enum RuntimeError: Error { case socket, bind, listen }
11 |     let kernel: HTTPKernel
   :
44 |             if fd >= 0 {
45 |                 DispatchQueue.global().async {
46 |                     self.handle(fd: fd)
   |                     `- error: capture of 'self' with non-sendable type 'SimpleHTTPRuntime' in a '@Sendable' closure
47 |                 }
48 |             }

[2025-07-15T19:33:43.150772] Starting swift build...
[2025-07-15T19:33:44.244697] swift build failed with exit code 1
[2025-07-15T19:33:44.400083] [dispatcher] Updated git remote to use token-based authentication.
[2025-07-15T19:33:46.600481] Opened PR #125 for Fountain-Coach/codex-deployer
[2025-07-15T19:34:49.306232] PR #125 merged
[2025-07-15T19:34:51.325943] [dispatcher] Running Docker build...
[2025-07-15T19:34:51.326664] [dispatcher] Running tests...
time="2025-07-15T19:34:51Z" level=warning msg="/srv/deploy/repos/fountainai/docker-compose.yml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion"
Compose now can delegate build to bake for better performances
Just set COMPOSE_BAKE=true
#0 building with "default" instance using docker driver

#1 [tools-factory internal] load build definition from Dockerfile
#1 transferring dockerfile: 284B done
#1 DONE 0.0s

#2 [persist internal] load build definition from Dockerfile
#2 transferring dockerfile: 266B done
#2 DONE 0.0s

#3 [planner internal] load build definition from Dockerfile
#3 transferring dockerfile: 266B done
#3 DONE 0.0s

#4 [function-caller internal] load build definition from Dockerfile
#4 transferring dockerfile: 290B done
#4 DONE 0.0s

#5 [llm-gateway internal] load build definition from Dockerfile
#5 transferring dockerfile: 278B done
#5 DONE 0.0s

#6 [bootstrap internal] load build definition from Dockerfile
#6 transferring dockerfile: 272B done
#6 DONE 0.0s

#7 [baseline-awareness internal] load build definition from Dockerfile
#7 transferring dockerfile: 299B done
#7 DONE 0.0s

#8 [baseline-awareness internal] load metadata for docker.io/library/swift:6.1-jammy
#8 DONE 0.7s

#9 [tools-factory internal] load metadata for docker.io/library/ubuntu:22.04
#9 DONE 0.6s

#10 [function-caller internal] load .dockerignore
#10 transferring context: 2B done
#10 DONE 0.0s

#11 [bootstrap internal] load .dockerignore
#11 transferring context: 2B done
#11 DONE 0.0s

#12 [planner internal] load .dockerignore
#12 transferring context: 2B done
#12 DONE 0.0s

#13 [persist build 1/4] FROM docker.io/library/swift:6.1-jammy@sha256:74fce669eb8620bce0607b9942c8f3b1a1933e7702b4784d7c2cc282715178f8
#13 DONE 0.0s

#14 [llm-gateway internal] load .dockerignore
#14 transferring context: 2B done
#14 DONE 0.0s

#15 [persist internal] load .dockerignore
#15 transferring context: 2B done
#15 DONE 0.0s

#16 [tools-factory internal] load .dockerignore
#16 transferring context: 2B done
#16 DONE 0.0s

#17 [baseline-awareness internal] load .dockerignore
#17 transferring context: 2B done
#17 DONE 0.0s

#18 [persist stage-1 1/2] FROM docker.io/library/ubuntu:22.04@sha256:3c61d3759c2639d4b836d32a2d3c83fa0214e36f195a3421018dbaaf79cbe37f
#18 CACHED

#19 [function-caller internal] load build context
#19 transferring context: 4.17MB 4.6s done
#19 DONE 4.7s

#20 [planner internal] load build context
#20 transferring context: 4.17MB 4.6s done
#20 DONE 4.7s

#21 [tools-factory internal] load build context
#21 transferring context: 4.17MB 4.6s done
#21 DONE 4.7s

#22 [baseline-awareness internal] load build context
#22 transferring context: 4.17MB 4.6s done
#22 DONE 4.7s

#23 [bootstrap internal] load build context
#23 transferring context: 4.17MB 4.6s done
#23 DONE 4.7s

#24 [persist internal] load build context
#24 transferring context: 4.17MB 4.6s done
#24 DONE 4.7s

#25 [function-caller build 2/4] WORKDIR /src
#25 CACHED

#26 [bootstrap build 3/4] COPY . .
#26 ...

#27 [llm-gateway internal] load build context
#27 transferring context: 4.17MB 4.5s done
#27 DONE 4.7s

#26 [llm-gateway build 3/4] COPY . .
