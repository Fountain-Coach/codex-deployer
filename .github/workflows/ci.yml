name: CI

on:
  push:
    branches: [ main ]
  pull_request:

env:
  CONTAINER_IMAGE: ghcr.io/${{ github.repository }}:latest

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: norio-nomura/action-swiftlint@3.2.1
        with:
          args: --config .swiftlint.yml
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: swift-actions/setup-swift@v1
        with:
          swift-version: '6.0.1'
      - name: Install coverage tools
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y lcov
      - name: Install SPS deps (Linux)
        if: runner.os == 'Linux'
        working-directory: sps
        run: sudo ./install-deps.sh
      - name: Install SPS deps (macOS)
        if: runner.os == 'macOS'
        working-directory: sps
        run: ./install-deps.sh
      - name: Build
        run: swift build
      - name: Test
        run: |
          swift test --enable-code-coverage
          echo "CODECOV_DIR=$(dirname $(swift test --show-codecov-path))" >> $GITHUB_ENV
      - name: Test SPS
        working-directory: sps
        run: swift test --enable-code-coverage
      - name: Verify licenses
        run: Scripts/verify-licenses.sh
      - name: Generate Coverage
        if: runner.os == 'Linux'
        run: |
          TEST_BINARY=$(find .build -name '*.xctest' | head -n 1)
          llvm-cov export -format=lcov "$TEST_BINARY" -instr-profile "$CODECOV_DIR/default.profdata" > coverage.lcov
          COVERAGE=$(lcov --summary coverage.lcov 2>/dev/null | grep lines | awk '{print $2}' | sed 's/%//')
          curl -s "https://img.shields.io/badge/Coverage-${COVERAGE}%25-blue" -o coverage-badge.svg
      - name: Upload Coverage
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.lcov
            coverage-badge.svg
      - name: Install supply chain tools
        if: runner.os == 'Linux'
        run: |
          curl -sSfL https://raw.githubusercontent.com/sigstore/cosign/main/install.sh | sudo sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin
      - name: Pre-deployment verification
        if: runner.os == 'Linux'
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
        run: Scripts/predeploy.sh "$CONTAINER_IMAGE"

  typesense-integration:
    name: Typesense Integration Tests (macOS)
    runs-on: macos-14
    if: ${{ secrets.TYPESENSE_API_KEY != '' && (secrets.TYPESENSE_URL != '' || secrets.TYPESENSE_URLS != '') }}
    env:
      TYPESENSE_API_KEY: ${{ secrets.TYPESENSE_API_KEY }}
      TYPESENSE_URL: ${{ secrets.TYPESENSE_URL }}
      TYPESENSE_URLS: ${{ secrets.TYPESENSE_URLS }}
    steps:
      - uses: actions/checkout@v4
      - uses: swift-actions/setup-swift@v1
        with:
          swift-version: '6.1.2'
      - name: Build
        run: swift build
      - name: Run Typesense integration tests
        run: swift test --filter TypesenseIntegrationTests


# ¬© 2025 Contexter alias Benedikt Eickhoff üõ°Ô∏è All rights reserved.
