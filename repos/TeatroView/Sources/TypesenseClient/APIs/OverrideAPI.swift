//
// OverrideAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class OverrideAPI {

    /**
     Retrieve a single search override
     
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The id of the search override 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchOverride
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSearchOverride(collectionName: String, overrideId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchOverride {
        return try await getSearchOverrideWithRequestBuilder(collectionName: collectionName, overrideId: overrideId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve a single search override
     - GET /collections/{collectionName}/overrides/{overrideId}
     - Retrieve the details of a search override, given its id.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The id of the search override 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchOverride> 
     */
    open class func getSearchOverrideWithRequestBuilder(collectionName: String, overrideId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchOverride> {
        var localVariablePath = "/collections/{collectionName}/overrides/{overrideId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let overrideIdPreEscape = "\(APIHelper.mapValueToPathItem(overrideId))"
        let overrideIdPostEscape = overrideIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{overrideId}", with: overrideIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchOverride>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
