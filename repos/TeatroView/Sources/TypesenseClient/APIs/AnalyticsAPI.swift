//
// AnalyticsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AnalyticsAPI {

    /**
     Create an analytics event
     
     - parameter analyticsEventCreateSchema: (body) The Analytics event to be created 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AnalyticsEventCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createAnalyticsEvent(analyticsEventCreateSchema: AnalyticsEventCreateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> AnalyticsEventCreateResponse {
        return try await createAnalyticsEventWithRequestBuilder(analyticsEventCreateSchema: analyticsEventCreateSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create an analytics event
     - POST /analytics/events
     - Sending events for analytics e.g rank search results based on popularity.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter analyticsEventCreateSchema: (body) The Analytics event to be created 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AnalyticsEventCreateResponse> 
     */
    open class func createAnalyticsEventWithRequestBuilder(analyticsEventCreateSchema: AnalyticsEventCreateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<AnalyticsEventCreateResponse> {
        let localVariablePath = "/analytics/events"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: analyticsEventCreateSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnalyticsEventCreateResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Creates an analytics rule
     
     - parameter analyticsRuleSchema: (body) The Analytics rule to be created 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AnalyticsRuleSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createAnalyticsRule(analyticsRuleSchema: AnalyticsRuleSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> AnalyticsRuleSchema {
        return try await createAnalyticsRuleWithRequestBuilder(analyticsRuleSchema: analyticsRuleSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Creates an analytics rule
     - POST /analytics/rules
     - When an analytics rule is created, we give it a name and describe the type, the source collections and the destination collection.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter analyticsRuleSchema: (body) The Analytics rule to be created 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AnalyticsRuleSchema> 
     */
    open class func createAnalyticsRuleWithRequestBuilder(analyticsRuleSchema: AnalyticsRuleSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<AnalyticsRuleSchema> {
        let localVariablePath = "/analytics/rules"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: analyticsRuleSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnalyticsRuleSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete an analytics rule
     
     - parameter ruleName: (path) The name of the analytics rule to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AnalyticsRuleDeleteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteAnalyticsRule(ruleName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> AnalyticsRuleDeleteResponse {
        return try await deleteAnalyticsRuleWithRequestBuilder(ruleName: ruleName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete an analytics rule
     - DELETE /analytics/rules/{ruleName}
     - Permanently deletes an analytics rule, given it's name
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter ruleName: (path) The name of the analytics rule to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AnalyticsRuleDeleteResponse> 
     */
    open class func deleteAnalyticsRuleWithRequestBuilder(ruleName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<AnalyticsRuleDeleteResponse> {
        var localVariablePath = "/analytics/rules/{ruleName}"
        let ruleNamePreEscape = "\(APIHelper.mapValueToPathItem(ruleName))"
        let ruleNamePostEscape = ruleNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ruleName}", with: ruleNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnalyticsRuleDeleteResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieves an analytics rule
     
     - parameter ruleName: (path) The name of the analytics rule to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AnalyticsRuleSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveAnalyticsRule(ruleName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> AnalyticsRuleSchema {
        return try await retrieveAnalyticsRuleWithRequestBuilder(ruleName: ruleName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieves an analytics rule
     - GET /analytics/rules/{ruleName}
     - Retrieve the details of an analytics rule, given it's name
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter ruleName: (path) The name of the analytics rule to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AnalyticsRuleSchema> 
     */
    open class func retrieveAnalyticsRuleWithRequestBuilder(ruleName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<AnalyticsRuleSchema> {
        var localVariablePath = "/analytics/rules/{ruleName}"
        let ruleNamePreEscape = "\(APIHelper.mapValueToPathItem(ruleName))"
        let ruleNamePostEscape = ruleNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ruleName}", with: ruleNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnalyticsRuleSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieves all analytics rules
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AnalyticsRulesRetrieveSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveAnalyticsRules(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> AnalyticsRulesRetrieveSchema {
        return try await retrieveAnalyticsRulesWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieves all analytics rules
     - GET /analytics/rules
     - Retrieve the details of all analytics rules
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AnalyticsRulesRetrieveSchema> 
     */
    open class func retrieveAnalyticsRulesWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<AnalyticsRulesRetrieveSchema> {
        let localVariablePath = "/analytics/rules"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnalyticsRulesRetrieveSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Upserts an analytics rule
     
     - parameter ruleName: (path) The name of the analytics rule to upsert 
     - parameter analyticsRuleUpsertSchema: (body) The Analytics rule to be upserted 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AnalyticsRuleSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func upsertAnalyticsRule(ruleName: String, analyticsRuleUpsertSchema: AnalyticsRuleUpsertSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> AnalyticsRuleSchema {
        return try await upsertAnalyticsRuleWithRequestBuilder(ruleName: ruleName, analyticsRuleUpsertSchema: analyticsRuleUpsertSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Upserts an analytics rule
     - PUT /analytics/rules/{ruleName}
     - Upserts an analytics rule with the given name.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter ruleName: (path) The name of the analytics rule to upsert 
     - parameter analyticsRuleUpsertSchema: (body) The Analytics rule to be upserted 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AnalyticsRuleSchema> 
     */
    open class func upsertAnalyticsRuleWithRequestBuilder(ruleName: String, analyticsRuleUpsertSchema: AnalyticsRuleUpsertSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<AnalyticsRuleSchema> {
        var localVariablePath = "/analytics/rules/{ruleName}"
        let ruleNamePreEscape = "\(APIHelper.mapValueToPathItem(ruleName))"
        let ruleNamePostEscape = ruleNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ruleName}", with: ruleNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: analyticsRuleUpsertSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnalyticsRuleSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
