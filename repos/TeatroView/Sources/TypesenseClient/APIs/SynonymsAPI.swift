//
// SynonymsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class SynonymsAPI {

    /**
     Delete a synonym associated with a collection
     
     - parameter collectionName: (path) The name of the collection 
     - parameter synonymId: (path) The ID of the search synonym to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchSynonymDeleteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteSearchSynonym(collectionName: String, synonymId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchSynonymDeleteResponse {
        return try await deleteSearchSynonymWithRequestBuilder(collectionName: collectionName, synonymId: synonymId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a synonym associated with a collection
     - DELETE /collections/{collectionName}/synonyms/{synonymId}
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter synonymId: (path) The ID of the search synonym to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchSynonymDeleteResponse> 
     */
    open class func deleteSearchSynonymWithRequestBuilder(collectionName: String, synonymId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchSynonymDeleteResponse> {
        var localVariablePath = "/collections/{collectionName}/synonyms/{synonymId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let synonymIdPreEscape = "\(APIHelper.mapValueToPathItem(synonymId))"
        let synonymIdPostEscape = synonymIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{synonymId}", with: synonymIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchSynonymDeleteResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieve a single search synonym
     
     - parameter collectionName: (path) The name of the collection 
     - parameter synonymId: (path) The id of the search synonym 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchSynonym
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSearchSynonym(collectionName: String, synonymId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchSynonym {
        return try await getSearchSynonymWithRequestBuilder(collectionName: collectionName, synonymId: synonymId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve a single search synonym
     - GET /collections/{collectionName}/synonyms/{synonymId}
     - Retrieve the details of a search synonym, given its id.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter synonymId: (path) The id of the search synonym 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchSynonym> 
     */
    open class func getSearchSynonymWithRequestBuilder(collectionName: String, synonymId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchSynonym> {
        var localVariablePath = "/collections/{collectionName}/synonyms/{synonymId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let synonymIdPreEscape = "\(APIHelper.mapValueToPathItem(synonymId))"
        let synonymIdPostEscape = synonymIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{synonymId}", with: synonymIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchSynonym>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List all collection synonyms
     
     - parameter collectionName: (path) The name of the collection 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchSynonymsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSearchSynonyms(collectionName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchSynonymsResponse {
        return try await getSearchSynonymsWithRequestBuilder(collectionName: collectionName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List all collection synonyms
     - GET /collections/{collectionName}/synonyms
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchSynonymsResponse> 
     */
    open class func getSearchSynonymsWithRequestBuilder(collectionName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchSynonymsResponse> {
        var localVariablePath = "/collections/{collectionName}/synonyms"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchSynonymsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create or update a synonym
     
     - parameter collectionName: (path) The name of the collection 
     - parameter synonymId: (path) The ID of the search synonym to create/update 
     - parameter searchSynonymSchema: (body) The search synonym object to be created/updated 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchSynonym
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func upsertSearchSynonym(collectionName: String, synonymId: String, searchSynonymSchema: SearchSynonymSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchSynonym {
        return try await upsertSearchSynonymWithRequestBuilder(collectionName: collectionName, synonymId: synonymId, searchSynonymSchema: searchSynonymSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create or update a synonym
     - PUT /collections/{collectionName}/synonyms/{synonymId}
     - Create or update a synonym  to define search terms that should be considered equivalent.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter synonymId: (path) The ID of the search synonym to create/update 
     - parameter searchSynonymSchema: (body) The search synonym object to be created/updated 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchSynonym> 
     */
    open class func upsertSearchSynonymWithRequestBuilder(collectionName: String, synonymId: String, searchSynonymSchema: SearchSynonymSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchSynonym> {
        var localVariablePath = "/collections/{collectionName}/synonyms/{synonymId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let synonymIdPreEscape = "\(APIHelper.mapValueToPathItem(synonymId))"
        let synonymIdPostEscape = synonymIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{synonymId}", with: synonymIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchSynonymSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchSynonym>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
