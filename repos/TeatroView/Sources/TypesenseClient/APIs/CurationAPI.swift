//
// CurationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CurationAPI {

    /**
     Delete an override associated with a collection
     
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The ID of the search override to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchOverrideDeleteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteSearchOverride(collectionName: String, overrideId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchOverrideDeleteResponse {
        return try await deleteSearchOverrideWithRequestBuilder(collectionName: collectionName, overrideId: overrideId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete an override associated with a collection
     - DELETE /collections/{collectionName}/overrides/{overrideId}
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The ID of the search override to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchOverrideDeleteResponse> 
     */
    open class func deleteSearchOverrideWithRequestBuilder(collectionName: String, overrideId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchOverrideDeleteResponse> {
        var localVariablePath = "/collections/{collectionName}/overrides/{overrideId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let overrideIdPreEscape = "\(APIHelper.mapValueToPathItem(overrideId))"
        let overrideIdPostEscape = overrideIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{overrideId}", with: overrideIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchOverrideDeleteResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List all collection overrides
     
     - parameter collectionName: (path) The name of the collection 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchOverridesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSearchOverrides(collectionName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchOverridesResponse {
        return try await getSearchOverridesWithRequestBuilder(collectionName: collectionName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List all collection overrides
     - GET /collections/{collectionName}/overrides
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchOverridesResponse> 
     */
    open class func getSearchOverridesWithRequestBuilder(collectionName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchOverridesResponse> {
        var localVariablePath = "/collections/{collectionName}/overrides"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchOverridesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create or update an override to promote certain documents over others
     
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The ID of the search override to create/update 
     - parameter searchOverrideSchema: (body) The search override object to be created/updated 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchOverride
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func upsertSearchOverride(collectionName: String, overrideId: String, searchOverrideSchema: SearchOverrideSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchOverride {
        return try await upsertSearchOverrideWithRequestBuilder(collectionName: collectionName, overrideId: overrideId, searchOverrideSchema: searchOverrideSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create or update an override to promote certain documents over others
     - PUT /collections/{collectionName}/overrides/{overrideId}
     - Create or update an override to promote certain documents over others. Using overrides, you can include or exclude specific documents for a given query.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The ID of the search override to create/update 
     - parameter searchOverrideSchema: (body) The search override object to be created/updated 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchOverride> 
     */
    open class func upsertSearchOverrideWithRequestBuilder(collectionName: String, overrideId: String, searchOverrideSchema: SearchOverrideSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchOverride> {
        var localVariablePath = "/collections/{collectionName}/overrides/{overrideId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let overrideIdPreEscape = "\(APIHelper.mapValueToPathItem(overrideId))"
        let overrideIdPostEscape = overrideIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{overrideId}", with: overrideIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchOverrideSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchOverride>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
