//
// PresetsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class PresetsAPI {

    /**
     Delete a preset.
     
     - parameter presetId: (path) The ID of the preset to delete. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PresetDeleteSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deletePreset(presetId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> PresetDeleteSchema {
        return try await deletePresetWithRequestBuilder(presetId: presetId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a preset.
     - DELETE /presets/{presetId}
     - Permanently deletes a preset, given it's name.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter presetId: (path) The ID of the preset to delete. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PresetDeleteSchema> 
     */
    open class func deletePresetWithRequestBuilder(presetId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<PresetDeleteSchema> {
        var localVariablePath = "/presets/{presetId}"
        let presetIdPreEscape = "\(APIHelper.mapValueToPathItem(presetId))"
        let presetIdPostEscape = presetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{presetId}", with: presetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PresetDeleteSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieves all presets.
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PresetsRetrieveSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveAllPresets(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> PresetsRetrieveSchema {
        return try await retrieveAllPresetsWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieves all presets.
     - GET /presets
     - Retrieve the details of all presets
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PresetsRetrieveSchema> 
     */
    open class func retrieveAllPresetsWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<PresetsRetrieveSchema> {
        let localVariablePath = "/presets"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PresetsRetrieveSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieves a preset.
     
     - parameter presetId: (path) The ID of the preset to retrieve. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PresetSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrievePreset(presetId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> PresetSchema {
        return try await retrievePresetWithRequestBuilder(presetId: presetId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieves a preset.
     - GET /presets/{presetId}
     - Retrieve the details of a preset, given it's name.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter presetId: (path) The ID of the preset to retrieve. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PresetSchema> 
     */
    open class func retrievePresetWithRequestBuilder(presetId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<PresetSchema> {
        var localVariablePath = "/presets/{presetId}"
        let presetIdPreEscape = "\(APIHelper.mapValueToPathItem(presetId))"
        let presetIdPostEscape = presetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{presetId}", with: presetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PresetSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Upserts a preset.
     
     - parameter presetId: (path) The name of the preset set to upsert. 
     - parameter presetUpsertSchema: (body) The stopwords set to upsert. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PresetSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func upsertPreset(presetId: String, presetUpsertSchema: PresetUpsertSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> PresetSchema {
        return try await upsertPresetWithRequestBuilder(presetId: presetId, presetUpsertSchema: presetUpsertSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Upserts a preset.
     - PUT /presets/{presetId}
     - Create or update an existing preset.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter presetId: (path) The name of the preset set to upsert. 
     - parameter presetUpsertSchema: (body) The stopwords set to upsert. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PresetSchema> 
     */
    open class func upsertPresetWithRequestBuilder(presetId: String, presetUpsertSchema: PresetUpsertSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<PresetSchema> {
        var localVariablePath = "/presets/{presetId}"
        let presetIdPreEscape = "\(APIHelper.mapValueToPathItem(presetId))"
        let presetIdPostEscape = presetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{presetId}", with: presetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: presetUpsertSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PresetSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
