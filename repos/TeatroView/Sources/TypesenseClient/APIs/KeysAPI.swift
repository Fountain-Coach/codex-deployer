//
// KeysAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class KeysAPI {

    /**
     Create an API Key
     
     - parameter apiKeySchema: (body) The object that describes API key scope (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiKey
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createKey(apiKeySchema: ApiKeySchema? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiKey {
        return try await createKeyWithRequestBuilder(apiKeySchema: apiKeySchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create an API Key
     - POST /keys
     - Create an API Key with fine-grain access control. You can restrict access on both a per-collection and per-action level. The generated key is returned only during creation. You want to store this key carefully in a secure place.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiKeySchema: (body) The object that describes API key scope (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiKey> 
     */
    open class func createKeyWithRequestBuilder(apiKeySchema: ApiKeySchema? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<ApiKey> {
        let localVariablePath = "/keys"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiKeySchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiKey>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete an API key given its ID.
     
     - parameter keyId: (path) The ID of the key to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiKeyDeleteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteKey(keyId: Int64, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiKeyDeleteResponse {
        return try await deleteKeyWithRequestBuilder(keyId: keyId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete an API key given its ID.
     - DELETE /keys/{keyId}
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter keyId: (path) The ID of the key to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiKeyDeleteResponse> 
     */
    open class func deleteKeyWithRequestBuilder(keyId: Int64, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<ApiKeyDeleteResponse> {
        var localVariablePath = "/keys/{keyId}"
        let keyIdPreEscape = "\(APIHelper.mapValueToPathItem(keyId))"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{keyId}", with: keyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiKeyDeleteResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieve (metadata about) a key
     
     - parameter keyId: (path) The ID of the key to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiKey
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getKey(keyId: Int64, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiKey {
        return try await getKeyWithRequestBuilder(keyId: keyId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve (metadata about) a key
     - GET /keys/{keyId}
     - Retrieve (metadata about) a key. Only the key prefix is returned when you retrieve a key. Due to security reasons, only the create endpoint returns the full API key.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter keyId: (path) The ID of the key to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiKey> 
     */
    open class func getKeyWithRequestBuilder(keyId: Int64, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<ApiKey> {
        var localVariablePath = "/keys/{keyId}"
        let keyIdPreEscape = "\(APIHelper.mapValueToPathItem(keyId))"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{keyId}", with: keyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiKey>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieve (metadata about) all keys.
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ApiKeysResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getKeys(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> ApiKeysResponse {
        return try await getKeysWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve (metadata about) all keys.
     - GET /keys
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ApiKeysResponse> 
     */
    open class func getKeysWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<ApiKeysResponse> {
        let localVariablePath = "/keys"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiKeysResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
