//
// ConversationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ConversationsAPI {

    /**
     Create a conversation model
     
     - parameter conversationModelCreateSchema: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConversationModelSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createConversationModel(conversationModelCreateSchema: ConversationModelCreateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConversationModelSchema {
        return try await createConversationModelWithRequestBuilder(conversationModelCreateSchema: conversationModelCreateSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create a conversation model
     - POST /conversations/models
     - Create a Conversation Model
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter conversationModelCreateSchema: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConversationModelSchema> 
     */
    open class func createConversationModelWithRequestBuilder(conversationModelCreateSchema: ConversationModelCreateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<ConversationModelSchema> {
        let localVariablePath = "/conversations/models"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: conversationModelCreateSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConversationModelSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a conversation model
     
     - parameter modelId: (path) The id of the conversation model to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConversationModelSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteConversationModel(modelId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConversationModelSchema {
        return try await deleteConversationModelWithRequestBuilder(modelId: modelId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a conversation model
     - DELETE /conversations/models/{modelId}
     - Delete a conversation model
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter modelId: (path) The id of the conversation model to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConversationModelSchema> 
     */
    open class func deleteConversationModelWithRequestBuilder(modelId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<ConversationModelSchema> {
        var localVariablePath = "/conversations/models/{modelId}"
        let modelIdPreEscape = "\(APIHelper.mapValueToPathItem(modelId))"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConversationModelSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List all conversation models
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [ConversationModelSchema]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveAllConversationModels(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> [ConversationModelSchema] {
        return try await retrieveAllConversationModelsWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List all conversation models
     - GET /conversations/models
     - Retrieve all conversation models
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[ConversationModelSchema]> 
     */
    open class func retrieveAllConversationModelsWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<[ConversationModelSchema]> {
        let localVariablePath = "/conversations/models"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ConversationModelSchema]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieve a conversation model
     
     - parameter modelId: (path) The id of the conversation model to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConversationModelSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveConversationModel(modelId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConversationModelSchema {
        return try await retrieveConversationModelWithRequestBuilder(modelId: modelId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve a conversation model
     - GET /conversations/models/{modelId}
     - Retrieve a conversation model
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter modelId: (path) The id of the conversation model to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConversationModelSchema> 
     */
    open class func retrieveConversationModelWithRequestBuilder(modelId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<ConversationModelSchema> {
        var localVariablePath = "/conversations/models/{modelId}"
        let modelIdPreEscape = "\(APIHelper.mapValueToPathItem(modelId))"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConversationModelSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update a conversation model
     
     - parameter modelId: (path) The id of the conversation model to update 
     - parameter conversationModelUpdateSchema: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConversationModelSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateConversationModel(modelId: String, conversationModelUpdateSchema: ConversationModelUpdateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConversationModelSchema {
        return try await updateConversationModelWithRequestBuilder(modelId: modelId, conversationModelUpdateSchema: conversationModelUpdateSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update a conversation model
     - PUT /conversations/models/{modelId}
     - Update a conversation model
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter modelId: (path) The id of the conversation model to update 
     - parameter conversationModelUpdateSchema: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConversationModelSchema> 
     */
    open class func updateConversationModelWithRequestBuilder(modelId: String, conversationModelUpdateSchema: ConversationModelUpdateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<ConversationModelSchema> {
        var localVariablePath = "/conversations/models/{modelId}"
        let modelIdPreEscape = "\(APIHelper.mapValueToPathItem(modelId))"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: conversationModelUpdateSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConversationModelSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
