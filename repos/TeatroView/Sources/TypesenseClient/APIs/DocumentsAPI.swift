//
// DocumentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class DocumentsAPI {

    /**
     Delete a document
     
     - parameter collectionName: (path) The name of the collection to search for the document under 
     - parameter documentId: (path) The Document ID 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteDocument(collectionName: String, documentId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> JSONValue {
        return try await deleteDocumentWithRequestBuilder(collectionName: collectionName, documentId: documentId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a document
     - DELETE /collections/{collectionName}/documents/{documentId}
     - Delete an individual document from a collection by using its ID.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection to search for the document under 
     - parameter documentId: (path) The Document ID 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func deleteDocumentWithRequestBuilder(collectionName: String, documentId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/collections/{collectionName}/documents/{documentId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a bunch of documents
     
     - parameter collectionName: (path) The name of the collection to delete documents from 
     - parameter deleteDocumentsParameters: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DeleteDocuments200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteDocuments(collectionName: String, deleteDocumentsParameters: DeleteDocumentsDeleteDocumentsParametersParameter? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> DeleteDocuments200Response {
        return try await deleteDocumentsWithRequestBuilder(collectionName: collectionName, deleteDocumentsParameters: deleteDocumentsParameters, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a bunch of documents
     - DELETE /collections/{collectionName}/documents
     - Delete a bunch of documents that match a specific filter condition. Use the `batch_size` parameter to control the number of documents that should deleted at a time. A larger value will speed up deletions, but will impact performance of other operations running on the server.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection to delete documents from 
     - parameter deleteDocumentsParameters: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DeleteDocuments200Response> 
     */
    open class func deleteDocumentsWithRequestBuilder(collectionName: String, deleteDocumentsParameters: DeleteDocumentsDeleteDocumentsParametersParameter? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<DeleteDocuments200Response> {
        var localVariablePath = "/collections/{collectionName}/documents"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "deleteDocumentsParameters": (wrappedValue: deleteDocumentsParameters?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteDocuments200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete an override associated with a collection
     
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The ID of the search override to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchOverrideDeleteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteSearchOverride(collectionName: String, overrideId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchOverrideDeleteResponse {
        return try await deleteSearchOverrideWithRequestBuilder(collectionName: collectionName, overrideId: overrideId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete an override associated with a collection
     - DELETE /collections/{collectionName}/overrides/{overrideId}
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The ID of the search override to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchOverrideDeleteResponse> 
     */
    open class func deleteSearchOverrideWithRequestBuilder(collectionName: String, overrideId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchOverrideDeleteResponse> {
        var localVariablePath = "/collections/{collectionName}/overrides/{overrideId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let overrideIdPreEscape = "\(APIHelper.mapValueToPathItem(overrideId))"
        let overrideIdPostEscape = overrideIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{overrideId}", with: overrideIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchOverrideDeleteResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Export all documents in a collection
     
     - parameter collectionName: (path) The name of the collection 
     - parameter exportDocumentsParameters: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: String
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func exportDocuments(collectionName: String, exportDocumentsParameters: ExportDocumentsExportDocumentsParametersParameter? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> String {
        return try await exportDocumentsWithRequestBuilder(collectionName: collectionName, exportDocumentsParameters: exportDocumentsParameters, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Export all documents in a collection
     - GET /collections/{collectionName}/documents/export
     - Export all documents in a collection in JSON lines format.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter exportDocumentsParameters: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<String> 
     */
    open class func exportDocumentsWithRequestBuilder(collectionName: String, exportDocumentsParameters: ExportDocumentsExportDocumentsParametersParameter? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<String> {
        var localVariablePath = "/collections/{collectionName}/documents/export"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "exportDocumentsParameters": (wrappedValue: exportDocumentsParameters?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retreive a document
     
     - parameter collectionName: (path) The name of the collection to search for the document under 
     - parameter documentId: (path) The Document ID 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDocument(collectionName: String, documentId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> JSONValue {
        return try await getDocumentWithRequestBuilder(collectionName: collectionName, documentId: documentId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retreive a document
     - GET /collections/{collectionName}/documents/{documentId}
     - Fetch an individual document from a collection by using its ID.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection to search for the document under 
     - parameter documentId: (path) The Document ID 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func getDocumentWithRequestBuilder(collectionName: String, documentId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/collections/{collectionName}/documents/{documentId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieve a single search override
     
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The id of the search override 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchOverride
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSearchOverride(collectionName: String, overrideId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchOverride {
        return try await getSearchOverrideWithRequestBuilder(collectionName: collectionName, overrideId: overrideId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve a single search override
     - GET /collections/{collectionName}/overrides/{overrideId}
     - Retrieve the details of a search override, given its id.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The id of the search override 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchOverride> 
     */
    open class func getSearchOverrideWithRequestBuilder(collectionName: String, overrideId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchOverride> {
        var localVariablePath = "/collections/{collectionName}/overrides/{overrideId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let overrideIdPreEscape = "\(APIHelper.mapValueToPathItem(overrideId))"
        let overrideIdPostEscape = overrideIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{overrideId}", with: overrideIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchOverride>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List all collection overrides
     
     - parameter collectionName: (path) The name of the collection 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchOverridesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSearchOverrides(collectionName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchOverridesResponse {
        return try await getSearchOverridesWithRequestBuilder(collectionName: collectionName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List all collection overrides
     - GET /collections/{collectionName}/overrides
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchOverridesResponse> 
     */
    open class func getSearchOverridesWithRequestBuilder(collectionName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchOverridesResponse> {
        var localVariablePath = "/collections/{collectionName}/overrides"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchOverridesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Import documents into a collection
     
     - parameter collectionName: (path) The name of the collection 
     - parameter body: (body) The json array of documents or the JSONL file to import 
     - parameter importDocumentsParameters: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: String
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func importDocuments(collectionName: String, body: String, importDocumentsParameters: ImportDocumentsImportDocumentsParametersParameter? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> String {
        return try await importDocumentsWithRequestBuilder(collectionName: collectionName, body: body, importDocumentsParameters: importDocumentsParameters, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Import documents into a collection
     - POST /collections/{collectionName}/documents/import
     - The documents to be imported must be formatted in a newline delimited JSON structure. You can feed the output file from a Typesense export operation directly as import.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter body: (body) The json array of documents or the JSONL file to import 
     - parameter importDocumentsParameters: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<String> 
     */
    open class func importDocumentsWithRequestBuilder(collectionName: String, body: String, importDocumentsParameters: ImportDocumentsImportDocumentsParametersParameter? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<String> {
        var localVariablePath = "/collections/{collectionName}/documents/import"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "importDocumentsParameters": (wrappedValue: importDocumentsParameters?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/octet-stream",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Index a document
     
     - parameter collectionName: (path) The name of the collection to add the document to 
     - parameter body: (body) The document object to be indexed 
     - parameter action: (query) Additional action to perform (optional)
     - parameter dirtyValues: (query) Dealing with Dirty Data (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func indexDocument(collectionName: String, body: JSONValue, action: IndexAction? = nil, dirtyValues: DirtyValues? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> JSONValue {
        return try await indexDocumentWithRequestBuilder(collectionName: collectionName, body: body, action: action, dirtyValues: dirtyValues, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Index a document
     - POST /collections/{collectionName}/documents
     - A document to be indexed in a given collection must conform to the schema of the collection.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection to add the document to 
     - parameter body: (body) The document object to be indexed 
     - parameter action: (query) Additional action to perform (optional)
     - parameter dirtyValues: (query) Dealing with Dirty Data (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func indexDocumentWithRequestBuilder(collectionName: String, body: JSONValue, action: IndexAction? = nil, dirtyValues: DirtyValues? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/collections/{collectionName}/documents"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": (wrappedValue: action?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "dirty_values": (wrappedValue: dirtyValues?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     send multiple search requests in a single HTTP request
     
     - parameter multiSearchParameters: (query)  
     - parameter multiSearchSearchesParameter: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MultiSearchResult
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func multiSearch(multiSearchParameters: MultiSearchParameters, multiSearchSearchesParameter: MultiSearchSearchesParameter? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> MultiSearchResult {
        return try await multiSearchWithRequestBuilder(multiSearchParameters: multiSearchParameters, multiSearchSearchesParameter: multiSearchSearchesParameter, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     send multiple search requests in a single HTTP request
     - POST /multi_search
     - This is especially useful to avoid round-trip network latencies incurred otherwise if each of these requests are sent in separate HTTP requests. You can also use this feature to do a federated search across multiple collections in a single HTTP request.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter multiSearchParameters: (query)  
     - parameter multiSearchSearchesParameter: (body)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MultiSearchResult> 
     */
    open class func multiSearchWithRequestBuilder(multiSearchParameters: MultiSearchParameters, multiSearchSearchesParameter: MultiSearchSearchesParameter? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<MultiSearchResult> {
        let localVariablePath = "/multi_search"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: multiSearchSearchesParameter, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "multiSearchParameters": (wrappedValue: multiSearchParameters.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiSearchResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Search for documents in a collection
     
     - parameter collectionName: (path) The name of the collection to search for the document under 
     - parameter searchParameters: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchResult
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func searchCollection(collectionName: String, searchParameters: SearchParameters, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchResult {
        return try await searchCollectionWithRequestBuilder(collectionName: collectionName, searchParameters: searchParameters, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Search for documents in a collection
     - GET /collections/{collectionName}/documents/search
     - Search for documents in a collection that match the search criteria.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection to search for the document under 
     - parameter searchParameters: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchResult> 
     */
    open class func searchCollectionWithRequestBuilder(collectionName: String, searchParameters: SearchParameters, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchResult> {
        var localVariablePath = "/collections/{collectionName}/documents/search"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "searchParameters": (wrappedValue: searchParameters.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchResult>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update a document
     
     - parameter collectionName: (path) The name of the collection to search for the document under 
     - parameter documentId: (path) The Document ID 
     - parameter body: (body) The document object with fields to be updated 
     - parameter dirtyValues: (query) Dealing with Dirty Data (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateDocument(collectionName: String, documentId: String, body: JSONValue, dirtyValues: DirtyValues? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> JSONValue {
        return try await updateDocumentWithRequestBuilder(collectionName: collectionName, documentId: documentId, body: body, dirtyValues: dirtyValues, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update a document
     - PATCH /collections/{collectionName}/documents/{documentId}
     - Update an individual document from a collection by using its ID. The update can be partial.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection to search for the document under 
     - parameter documentId: (path) The Document ID 
     - parameter body: (body) The document object with fields to be updated 
     - parameter dirtyValues: (query) Dealing with Dirty Data (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func updateDocumentWithRequestBuilder(collectionName: String, documentId: String, body: JSONValue, dirtyValues: DirtyValues? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/collections/{collectionName}/documents/{documentId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "dirty_values": (wrappedValue: dirtyValues?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update documents with conditional query
     
     - parameter collectionName: (path) The name of the collection to update documents in 
     - parameter body: (body) The document fields to be updated 
     - parameter updateDocumentsParameters: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UpdateDocuments200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateDocuments(collectionName: String, body: JSONValue, updateDocumentsParameters: UpdateDocumentsUpdateDocumentsParametersParameter? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> UpdateDocuments200Response {
        return try await updateDocumentsWithRequestBuilder(collectionName: collectionName, body: body, updateDocumentsParameters: updateDocumentsParameters, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update documents with conditional query
     - PATCH /collections/{collectionName}/documents
     - The filter_by query parameter is used to filter to specify a condition against which the documents are matched. The request body contains the fields that should be updated for any documents that match the filter condition. This endpoint is only available if the Typesense server is version `0.25.0.rc12` or later.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection to update documents in 
     - parameter body: (body) The document fields to be updated 
     - parameter updateDocumentsParameters: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UpdateDocuments200Response> 
     */
    open class func updateDocumentsWithRequestBuilder(collectionName: String, body: JSONValue, updateDocumentsParameters: UpdateDocumentsUpdateDocumentsParametersParameter? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<UpdateDocuments200Response> {
        var localVariablePath = "/collections/{collectionName}/documents"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "updateDocumentsParameters": (wrappedValue: updateDocumentsParameters?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateDocuments200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create or update an override to promote certain documents over others
     
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The ID of the search override to create/update 
     - parameter searchOverrideSchema: (body) The search override object to be created/updated 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SearchOverride
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func upsertSearchOverride(collectionName: String, overrideId: String, searchOverrideSchema: SearchOverrideSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SearchOverride {
        return try await upsertSearchOverrideWithRequestBuilder(collectionName: collectionName, overrideId: overrideId, searchOverrideSchema: searchOverrideSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create or update an override to promote certain documents over others
     - PUT /collections/{collectionName}/overrides/{overrideId}
     - Create or update an override to promote certain documents over others. Using overrides, you can include or exclude specific documents for a given query.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection 
     - parameter overrideId: (path) The ID of the search override to create/update 
     - parameter searchOverrideSchema: (body) The search override object to be created/updated 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SearchOverride> 
     */
    open class func upsertSearchOverrideWithRequestBuilder(collectionName: String, overrideId: String, searchOverrideSchema: SearchOverrideSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SearchOverride> {
        var localVariablePath = "/collections/{collectionName}/overrides/{overrideId}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let overrideIdPreEscape = "\(APIHelper.mapValueToPathItem(overrideId))"
        let overrideIdPostEscape = overrideIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{overrideId}", with: overrideIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: searchOverrideSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchOverride>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
