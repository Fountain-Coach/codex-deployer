//
// OperationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class OperationsAPI {

    /**
     Get the status of in-progress schema change operations
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [SchemaChangeStatus]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSchemaChanges(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> [SchemaChangeStatus] {
        return try await getSchemaChangesWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get the status of in-progress schema change operations
     - GET /operations/schema_changes
     - Returns the status of any ongoing schema change operations. If no schema changes are in progress, returns an empty response.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[SchemaChangeStatus]> 
     */
    open class func getSchemaChangesWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<[SchemaChangeStatus]> {
        let localVariablePath = "/operations/schema_changes"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[SchemaChangeStatus]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get stats about API endpoints.
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: APIStatsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveAPIStats(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> APIStatsResponse {
        return try await retrieveAPIStatsWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get stats about API endpoints.
     - GET /stats.json
     - Retrieve the stats about API endpoints.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<APIStatsResponse> 
     */
    open class func retrieveAPIStatsWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<APIStatsResponse> {
        let localVariablePath = "/stats.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIStatsResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get current RAM, CPU, Disk & Network usage metrics.
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveMetrics(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> JSONValue {
        return try await retrieveMetricsWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get current RAM, CPU, Disk & Network usage metrics.
     - GET /metrics.json
     - Retrieve the metrics.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func retrieveMetricsWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/metrics.json"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Creates a point-in-time snapshot of a Typesense node's state and data in the specified directory.
     
     - parameter snapshotPath: (query) The directory on the server where the snapshot should be saved. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SuccessStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func takeSnapshot(snapshotPath: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SuccessStatus {
        return try await takeSnapshotWithRequestBuilder(snapshotPath: snapshotPath, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Creates a point-in-time snapshot of a Typesense node's state and data in the specified directory.
     - POST /operations/snapshot
     - Creates a point-in-time snapshot of a Typesense node's state and data in the specified directory. You can then backup the snapshot directory that gets created and later restore it as a data directory, as needed.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter snapshotPath: (query) The directory on the server where the snapshot should be saved. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SuccessStatus> 
     */
    open class func takeSnapshotWithRequestBuilder(snapshotPath: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SuccessStatus> {
        let localVariablePath = "/operations/snapshot"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "snapshot_path": (wrappedValue: snapshotPath.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessStatus>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Triggers a follower node to initiate the raft voting process, which triggers leader re-election.
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SuccessStatus
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func vote(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> SuccessStatus {
        return try await voteWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Triggers a follower node to initiate the raft voting process, which triggers leader re-election.
     - POST /operations/vote
     - Triggers a follower node to initiate the raft voting process, which triggers leader re-election. The follower node that you run this operation against will become the new leader, once this command succeeds.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SuccessStatus> 
     */
    open class func voteWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<SuccessStatus> {
        let localVariablePath = "/operations/vote"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessStatus>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
