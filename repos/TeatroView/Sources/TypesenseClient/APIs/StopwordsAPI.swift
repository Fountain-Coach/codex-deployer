//
// StopwordsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class StopwordsAPI {

    /**
     Delete a stopwords set.
     
     - parameter setId: (path) The ID of the stopwords set to delete. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DeleteStopwordsSet200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteStopwordsSet(setId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> DeleteStopwordsSet200Response {
        return try await deleteStopwordsSetWithRequestBuilder(setId: setId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a stopwords set.
     - DELETE /stopwords/{setId}
     - Permanently deletes a stopwords set, given it's name.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter setId: (path) The ID of the stopwords set to delete. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DeleteStopwordsSet200Response> 
     */
    open class func deleteStopwordsSetWithRequestBuilder(setId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<DeleteStopwordsSet200Response> {
        var localVariablePath = "/stopwords/{setId}"
        let setIdPreEscape = "\(APIHelper.mapValueToPathItem(setId))"
        let setIdPostEscape = setIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{setId}", with: setIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteStopwordsSet200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieves a stopwords set.
     
     - parameter setId: (path) The ID of the stopwords set to retrieve. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: StopwordsSetRetrieveSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveStopwordsSet(setId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> StopwordsSetRetrieveSchema {
        return try await retrieveStopwordsSetWithRequestBuilder(setId: setId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieves a stopwords set.
     - GET /stopwords/{setId}
     - Retrieve the details of a stopwords set, given it's name.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter setId: (path) The ID of the stopwords set to retrieve. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<StopwordsSetRetrieveSchema> 
     */
    open class func retrieveStopwordsSetWithRequestBuilder(setId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<StopwordsSetRetrieveSchema> {
        var localVariablePath = "/stopwords/{setId}"
        let setIdPreEscape = "\(APIHelper.mapValueToPathItem(setId))"
        let setIdPostEscape = setIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{setId}", with: setIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StopwordsSetRetrieveSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieves all stopwords sets.
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: StopwordsSetsRetrieveAllSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveStopwordsSets(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> StopwordsSetsRetrieveAllSchema {
        return try await retrieveStopwordsSetsWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieves all stopwords sets.
     - GET /stopwords
     - Retrieve the details of all stopwords sets
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<StopwordsSetsRetrieveAllSchema> 
     */
    open class func retrieveStopwordsSetsWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<StopwordsSetsRetrieveAllSchema> {
        let localVariablePath = "/stopwords"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StopwordsSetsRetrieveAllSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Upserts a stopwords set.
     
     - parameter setId: (path) The ID of the stopwords set to upsert. 
     - parameter stopwordsSetUpsertSchema: (body) The stopwords set to upsert. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: StopwordsSetSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func upsertStopwordsSet(setId: String, stopwordsSetUpsertSchema: StopwordsSetUpsertSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> StopwordsSetSchema {
        return try await upsertStopwordsSetWithRequestBuilder(setId: setId, stopwordsSetUpsertSchema: stopwordsSetUpsertSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Upserts a stopwords set.
     - PUT /stopwords/{setId}
     - When an analytics rule is created, we give it a name and describe the type, the source collections and the destination collection.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter setId: (path) The ID of the stopwords set to upsert. 
     - parameter stopwordsSetUpsertSchema: (body) The stopwords set to upsert. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<StopwordsSetSchema> 
     */
    open class func upsertStopwordsSetWithRequestBuilder(setId: String, stopwordsSetUpsertSchema: StopwordsSetUpsertSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<StopwordsSetSchema> {
        var localVariablePath = "/stopwords/{setId}"
        let setIdPreEscape = "\(APIHelper.mapValueToPathItem(setId))"
        let setIdPostEscape = setIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{setId}", with: setIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: stopwordsSetUpsertSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StopwordsSetSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
