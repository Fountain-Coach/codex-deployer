//
// NlSearchModelsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class NlSearchModelsAPI {

    /**
     Create a NL search model
     
     - parameter nLSearchModelCreateSchema: (body) The NL search model to be created 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NLSearchModelSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createNLSearchModel(nLSearchModelCreateSchema: NLSearchModelCreateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> NLSearchModelSchema {
        return try await createNLSearchModelWithRequestBuilder(nLSearchModelCreateSchema: nLSearchModelCreateSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create a NL search model
     - POST /nl_search_models
     - Create a new NL search model.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter nLSearchModelCreateSchema: (body) The NL search model to be created 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NLSearchModelSchema> 
     */
    open class func createNLSearchModelWithRequestBuilder(nLSearchModelCreateSchema: NLSearchModelCreateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<NLSearchModelSchema> {
        let localVariablePath = "/nl_search_models"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: nLSearchModelCreateSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NLSearchModelSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a NL search model
     
     - parameter modelId: (path) The ID of the NL search model to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NLSearchModelDeleteSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteNLSearchModel(modelId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> NLSearchModelDeleteSchema {
        return try await deleteNLSearchModelWithRequestBuilder(modelId: modelId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a NL search model
     - DELETE /nl_search_models/{modelId}
     - Delete a specific NL search model by its ID.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter modelId: (path) The ID of the NL search model to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NLSearchModelDeleteSchema> 
     */
    open class func deleteNLSearchModelWithRequestBuilder(modelId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<NLSearchModelDeleteSchema> {
        var localVariablePath = "/nl_search_models/{modelId}"
        let modelIdPreEscape = "\(APIHelper.mapValueToPathItem(modelId))"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NLSearchModelDeleteSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List all NL search models
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [NLSearchModelSchema]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveAllNLSearchModels(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> [NLSearchModelSchema] {
        return try await retrieveAllNLSearchModelsWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List all NL search models
     - GET /nl_search_models
     - Retrieve all NL search models.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[NLSearchModelSchema]> 
     */
    open class func retrieveAllNLSearchModelsWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<[NLSearchModelSchema]> {
        let localVariablePath = "/nl_search_models"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NLSearchModelSchema]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieve a NL search model
     
     - parameter modelId: (path) The ID of the NL search model to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NLSearchModelSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retrieveNLSearchModel(modelId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> NLSearchModelSchema {
        return try await retrieveNLSearchModelWithRequestBuilder(modelId: modelId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve a NL search model
     - GET /nl_search_models/{modelId}
     - Retrieve a specific NL search model by its ID.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter modelId: (path) The ID of the NL search model to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NLSearchModelSchema> 
     */
    open class func retrieveNLSearchModelWithRequestBuilder(modelId: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<NLSearchModelSchema> {
        var localVariablePath = "/nl_search_models/{modelId}"
        let modelIdPreEscape = "\(APIHelper.mapValueToPathItem(modelId))"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NLSearchModelSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update a NL search model
     
     - parameter modelId: (path) The ID of the NL search model to update 
     - parameter body: (body) The NL search model fields to update 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: NLSearchModelSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateNLSearchModel(modelId: String, body: NLSearchModelCreateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> NLSearchModelSchema {
        return try await updateNLSearchModelWithRequestBuilder(modelId: modelId, body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update a NL search model
     - PUT /nl_search_models/{modelId}
     - Update an existing NL search model.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter modelId: (path) The ID of the NL search model to update 
     - parameter body: (body) The NL search model fields to update 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<NLSearchModelSchema> 
     */
    open class func updateNLSearchModelWithRequestBuilder(modelId: String, body: NLSearchModelCreateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<NLSearchModelSchema> {
        var localVariablePath = "/nl_search_models/{modelId}"
        let modelIdPreEscape = "\(APIHelper.mapValueToPathItem(modelId))"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NLSearchModelSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
