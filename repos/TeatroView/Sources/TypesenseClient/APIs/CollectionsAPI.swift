//
// CollectionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CollectionsAPI {

    /**
     Create a new collection
     
     - parameter collectionSchema: (body) The collection object to be created 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CollectionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createCollection(collectionSchema: CollectionSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> CollectionResponse {
        return try await createCollectionWithRequestBuilder(collectionSchema: collectionSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create a new collection
     - POST /collections
     - When a collection is created, we give it a name and describe the fields that will be indexed from the documents added to the collection.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionSchema: (body) The collection object to be created 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CollectionResponse> 
     */
    open class func createCollectionWithRequestBuilder(collectionSchema: CollectionSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<CollectionResponse> {
        let localVariablePath = "/collections"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete an alias
     
     - parameter aliasName: (path) The name of the alias to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CollectionAlias
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteAlias(aliasName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> CollectionAlias {
        return try await deleteAliasWithRequestBuilder(aliasName: aliasName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete an alias
     - DELETE /aliases/{aliasName}
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter aliasName: (path) The name of the alias to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CollectionAlias> 
     */
    open class func deleteAliasWithRequestBuilder(aliasName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<CollectionAlias> {
        var localVariablePath = "/aliases/{aliasName}"
        let aliasNamePreEscape = "\(APIHelper.mapValueToPathItem(aliasName))"
        let aliasNamePostEscape = aliasNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{aliasName}", with: aliasNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionAlias>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a collection
     
     - parameter collectionName: (path) The name of the collection to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CollectionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteCollection(collectionName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> CollectionResponse {
        return try await deleteCollectionWithRequestBuilder(collectionName: collectionName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a collection
     - DELETE /collections/{collectionName}
     - Permanently drops a collection. This action cannot be undone. For large collections, this might have an impact on read latencies.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection to delete 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CollectionResponse> 
     */
    open class func deleteCollectionWithRequestBuilder(collectionName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<CollectionResponse> {
        var localVariablePath = "/collections/{collectionName}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieve an alias
     
     - parameter aliasName: (path) The name of the alias to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CollectionAlias
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAlias(aliasName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> CollectionAlias {
        return try await getAliasWithRequestBuilder(aliasName: aliasName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve an alias
     - GET /aliases/{aliasName}
     - Find out which collection an alias points to by fetching it
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter aliasName: (path) The name of the alias to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CollectionAlias> 
     */
    open class func getAliasWithRequestBuilder(aliasName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<CollectionAlias> {
        var localVariablePath = "/aliases/{aliasName}"
        let aliasNamePreEscape = "\(APIHelper.mapValueToPathItem(aliasName))"
        let aliasNamePostEscape = aliasNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{aliasName}", with: aliasNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionAlias>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List all aliases
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CollectionAliasesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAliases(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> CollectionAliasesResponse {
        return try await getAliasesWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List all aliases
     - GET /aliases
     - List all aliases and the corresponding collections that they map to.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CollectionAliasesResponse> 
     */
    open class func getAliasesWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<CollectionAliasesResponse> {
        let localVariablePath = "/aliases"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionAliasesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Retrieve a single collection
     
     - parameter collectionName: (path) The name of the collection to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CollectionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCollection(collectionName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> CollectionResponse {
        return try await getCollectionWithRequestBuilder(collectionName: collectionName, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve a single collection
     - GET /collections/{collectionName}
     - Retrieve the details of a collection, given its name.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CollectionResponse> 
     */
    open class func getCollectionWithRequestBuilder(collectionName: String, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<CollectionResponse> {
        var localVariablePath = "/collections/{collectionName}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List all collections
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [CollectionResponse]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCollections(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> [CollectionResponse] {
        return try await getCollectionsWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List all collections
     - GET /collections
     - Returns a summary of all your collections. The collections are returned sorted by creation date, with the most recent collections appearing first.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[CollectionResponse]> 
     */
    open class func getCollectionsWithRequestBuilder(apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<[CollectionResponse]> {
        let localVariablePath = "/collections"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CollectionResponse]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update a collection
     
     - parameter collectionName: (path) The name of the collection to update 
     - parameter collectionUpdateSchema: (body) The document object with fields to be updated 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CollectionUpdateSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateCollection(collectionName: String, collectionUpdateSchema: CollectionUpdateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> CollectionUpdateSchema {
        return try await updateCollectionWithRequestBuilder(collectionName: collectionName, collectionUpdateSchema: collectionUpdateSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update a collection
     - PATCH /collections/{collectionName}
     - Update a collection's schema to modify the fields and their types.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter collectionName: (path) The name of the collection to update 
     - parameter collectionUpdateSchema: (body) The document object with fields to be updated 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CollectionUpdateSchema> 
     */
    open class func updateCollectionWithRequestBuilder(collectionName: String, collectionUpdateSchema: CollectionUpdateSchema, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<CollectionUpdateSchema> {
        var localVariablePath = "/collections/{collectionName}"
        let collectionNamePreEscape = "\(APIHelper.mapValueToPathItem(collectionName))"
        let collectionNamePostEscape = collectionNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionName}", with: collectionNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionUpdateSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionUpdateSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create or update a collection alias
     
     - parameter aliasName: (path) The name of the alias to create/update 
     - parameter collectionAliasSchema: (body) Collection alias to be created/updated (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CollectionAlias
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func upsertAlias(aliasName: String, collectionAliasSchema: CollectionAliasSchema? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) async throws(ErrorResponse) -> CollectionAlias {
        return try await upsertAliasWithRequestBuilder(aliasName: aliasName, collectionAliasSchema: collectionAliasSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create or update a collection alias
     - PUT /aliases/{aliasName}
     - Create or update a collection alias. An alias is a virtual collection name that points to a real collection. If you're familiar with symbolic links on Linux, it's very similar to that. Aliases are useful when you want to reindex your data in the background on a new collection and switch your application to it without any changes to your code.
     - API Key:
       - type: apiKey X-TYPESENSE-API-KEY (HEADER)
       - name: api_key_header
     - parameter aliasName: (path) The name of the alias to create/update 
     - parameter collectionAliasSchema: (body) Collection alias to be created/updated (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CollectionAlias> 
     */
    open class func upsertAliasWithRequestBuilder(aliasName: String, collectionAliasSchema: CollectionAliasSchema? = nil, apiConfiguration: TypesenseClientAPIConfiguration = TypesenseClientAPIConfiguration.shared) -> RequestBuilder<CollectionAlias> {
        var localVariablePath = "/aliases/{aliasName}"
        let aliasNamePreEscape = "\(APIHelper.mapValueToPathItem(aliasName))"
        let aliasNamePostEscape = aliasNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{aliasName}", with: aliasNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionAliasSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionAlias>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
