//
// SearchSynonym.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SearchSynonym: Sendable, Codable, ParameterConvertible, Hashable {

    /** For 1-way synonyms, indicates the root word that words in the `synonyms` parameter map to. */
    public var root: String?
    /** Array of words that should be considered as synonyms. */
    public var synonyms: [String]
    /** Locale for the synonym, leave blank to use the standard tokenizer. */
    public var locale: String?
    /** By default, special characters are dropped from synonyms. Use this attribute to specify which special characters should be indexed as is. */
    public var symbolsToIndex: [String]?
    public var id: String

    public init(root: String? = nil, synonyms: [String], locale: String? = nil, symbolsToIndex: [String]? = nil, id: String) {
        self.root = root
        self.synonyms = synonyms
        self.locale = locale
        self.symbolsToIndex = symbolsToIndex
        self.id = id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case root
        case synonyms
        case locale
        case symbolsToIndex = "symbols_to_index"
        case id
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(root, forKey: .root)
        try container.encode(synonyms, forKey: .synonyms)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeIfPresent(symbolsToIndex, forKey: .symbolsToIndex)
        try container.encode(id, forKey: .id)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension SearchSynonym: Identifiable {}
