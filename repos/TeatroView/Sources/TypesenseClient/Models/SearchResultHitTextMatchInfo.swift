//
// SearchResultHitTextMatchInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SearchResultHitTextMatchInfo: Sendable, Codable, ParameterConvertible, Hashable {

    public var bestFieldScore: String?
    public var bestFieldWeight: Int?
    public var fieldsMatched: Int?
    public var numTokensDropped: Int64?
    public var score: String?
    public var tokensMatched: Int?
    public var typoPrefixScore: Int?

    public init(bestFieldScore: String? = nil, bestFieldWeight: Int? = nil, fieldsMatched: Int? = nil, numTokensDropped: Int64? = nil, score: String? = nil, tokensMatched: Int? = nil, typoPrefixScore: Int? = nil) {
        self.bestFieldScore = bestFieldScore
        self.bestFieldWeight = bestFieldWeight
        self.fieldsMatched = fieldsMatched
        self.numTokensDropped = numTokensDropped
        self.score = score
        self.tokensMatched = tokensMatched
        self.typoPrefixScore = typoPrefixScore
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bestFieldScore = "best_field_score"
        case bestFieldWeight = "best_field_weight"
        case fieldsMatched = "fields_matched"
        case numTokensDropped = "num_tokens_dropped"
        case score
        case tokensMatched = "tokens_matched"
        case typoPrefixScore = "typo_prefix_score"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bestFieldScore, forKey: .bestFieldScore)
        try container.encodeIfPresent(bestFieldWeight, forKey: .bestFieldWeight)
        try container.encodeIfPresent(fieldsMatched, forKey: .fieldsMatched)
        try container.encodeIfPresent(numTokensDropped, forKey: .numTokensDropped)
        try container.encodeIfPresent(score, forKey: .score)
        try container.encodeIfPresent(tokensMatched, forKey: .tokensMatched)
        try container.encodeIfPresent(typoPrefixScore, forKey: .typoPrefixScore)
    }
}

