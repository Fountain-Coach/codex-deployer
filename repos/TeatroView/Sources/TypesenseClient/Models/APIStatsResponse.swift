//
// APIStatsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct APIStatsResponse: Sendable, Codable, ParameterConvertible, Hashable {

    public var deleteLatencyMs: Double?
    public var deleteRequestsPerSecond: Double?
    public var importLatencyMs: Double?
    public var importRequestsPerSecond: Double?
    public var latencyMs: JSONValue?
    public var overloadedRequestsPerSecond: Double?
    public var pendingWriteBatches: Double?
    public var requestsPerSecond: JSONValue?
    public var searchLatencyMs: Double?
    public var searchRequestsPerSecond: Double?
    public var totalRequestsPerSecond: Double?
    public var writeLatencyMs: Double?
    public var writeRequestsPerSecond: Double?

    public init(deleteLatencyMs: Double? = nil, deleteRequestsPerSecond: Double? = nil, importLatencyMs: Double? = nil, importRequestsPerSecond: Double? = nil, latencyMs: JSONValue? = nil, overloadedRequestsPerSecond: Double? = nil, pendingWriteBatches: Double? = nil, requestsPerSecond: JSONValue? = nil, searchLatencyMs: Double? = nil, searchRequestsPerSecond: Double? = nil, totalRequestsPerSecond: Double? = nil, writeLatencyMs: Double? = nil, writeRequestsPerSecond: Double? = nil) {
        self.deleteLatencyMs = deleteLatencyMs
        self.deleteRequestsPerSecond = deleteRequestsPerSecond
        self.importLatencyMs = importLatencyMs
        self.importRequestsPerSecond = importRequestsPerSecond
        self.latencyMs = latencyMs
        self.overloadedRequestsPerSecond = overloadedRequestsPerSecond
        self.pendingWriteBatches = pendingWriteBatches
        self.requestsPerSecond = requestsPerSecond
        self.searchLatencyMs = searchLatencyMs
        self.searchRequestsPerSecond = searchRequestsPerSecond
        self.totalRequestsPerSecond = totalRequestsPerSecond
        self.writeLatencyMs = writeLatencyMs
        self.writeRequestsPerSecond = writeRequestsPerSecond
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case deleteLatencyMs = "delete_latency_ms"
        case deleteRequestsPerSecond = "delete_requests_per_second"
        case importLatencyMs = "import_latency_ms"
        case importRequestsPerSecond = "import_requests_per_second"
        case latencyMs = "latency_ms"
        case overloadedRequestsPerSecond = "overloaded_requests_per_second"
        case pendingWriteBatches = "pending_write_batches"
        case requestsPerSecond = "requests_per_second"
        case searchLatencyMs = "search_latency_ms"
        case searchRequestsPerSecond = "search_requests_per_second"
        case totalRequestsPerSecond = "total_requests_per_second"
        case writeLatencyMs = "write_latency_ms"
        case writeRequestsPerSecond = "write_requests_per_second"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(deleteLatencyMs, forKey: .deleteLatencyMs)
        try container.encodeIfPresent(deleteRequestsPerSecond, forKey: .deleteRequestsPerSecond)
        try container.encodeIfPresent(importLatencyMs, forKey: .importLatencyMs)
        try container.encodeIfPresent(importRequestsPerSecond, forKey: .importRequestsPerSecond)
        try container.encodeIfPresent(latencyMs, forKey: .latencyMs)
        try container.encodeIfPresent(overloadedRequestsPerSecond, forKey: .overloadedRequestsPerSecond)
        try container.encodeIfPresent(pendingWriteBatches, forKey: .pendingWriteBatches)
        try container.encodeIfPresent(requestsPerSecond, forKey: .requestsPerSecond)
        try container.encodeIfPresent(searchLatencyMs, forKey: .searchLatencyMs)
        try container.encodeIfPresent(searchRequestsPerSecond, forKey: .searchRequestsPerSecond)
        try container.encodeIfPresent(totalRequestsPerSecond, forKey: .totalRequestsPerSecond)
        try container.encodeIfPresent(writeLatencyMs, forKey: .writeLatencyMs)
        try container.encodeIfPresent(writeRequestsPerSecond, forKey: .writeRequestsPerSecond)
    }
}

