//
// ImportDocumentsImportDocumentsParametersParameter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ImportDocumentsImportDocumentsParametersParameter: Sendable, Codable, ParameterConvertible, Hashable {

    public var batchSize: Int?
    /** Returning the id of the imported documents. If you want the import response to return the ingested document's id in the response, you can use the return_id parameter. */
    public var returnId: Bool?
    public var remoteEmbeddingBatchSize: Int?
    public var returnDoc: Bool?
    public var action: IndexAction?
    public var dirtyValues: DirtyValues?

    public init(batchSize: Int? = nil, returnId: Bool? = nil, remoteEmbeddingBatchSize: Int? = nil, returnDoc: Bool? = nil, action: IndexAction? = nil, dirtyValues: DirtyValues? = nil) {
        self.batchSize = batchSize
        self.returnId = returnId
        self.remoteEmbeddingBatchSize = remoteEmbeddingBatchSize
        self.returnDoc = returnDoc
        self.action = action
        self.dirtyValues = dirtyValues
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case batchSize = "batch_size"
        case returnId = "return_id"
        case remoteEmbeddingBatchSize = "remote_embedding_batch_size"
        case returnDoc = "return_doc"
        case action
        case dirtyValues = "dirty_values"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(batchSize, forKey: .batchSize)
        try container.encodeIfPresent(returnId, forKey: .returnId)
        try container.encodeIfPresent(remoteEmbeddingBatchSize, forKey: .remoteEmbeddingBatchSize)
        try container.encodeIfPresent(returnDoc, forKey: .returnDoc)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(dirtyValues, forKey: .dirtyValues)
    }
}

