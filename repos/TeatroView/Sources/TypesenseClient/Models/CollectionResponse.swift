//
// CollectionResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CollectionResponse: Sendable, Codable, ParameterConvertible, Hashable {

    /** Name of the collection */
    public var name: String
    /** A list of fields for querying, filtering and faceting */
    public var fields: [Field]
    /** The name of an int32 / float field that determines the order in which the search results are ranked when a sort_by clause is not provided during searching. This field must indicate some kind of popularity. */
    public var defaultSortingField: String? = ""
    /** List of symbols or special characters to be used for splitting the text into individual words in addition to space and new-line characters.  */
    public var tokenSeparators: [String]?
    /** Enables experimental support at a collection level for nested object or object array fields. This field is only available if the Typesense server is version `0.24.0.rcn34` or later. */
    public var enableNestedFields: Bool? = false
    /** List of symbols or special characters to be indexed.  */
    public var symbolsToIndex: [String]?
    public var voiceQueryModel: VoiceQueryModelCollectionConfig?
    /** Number of documents in the collection */
    public var numDocuments: Int64
    /** Timestamp of when the collection was created (Unix epoch in seconds) */
    public var createdAt: Int64

    public init(name: String, fields: [Field], defaultSortingField: String? = "", tokenSeparators: [String]? = nil, enableNestedFields: Bool? = false, symbolsToIndex: [String]? = nil, voiceQueryModel: VoiceQueryModelCollectionConfig? = nil, numDocuments: Int64, createdAt: Int64) {
        self.name = name
        self.fields = fields
        self.defaultSortingField = defaultSortingField
        self.tokenSeparators = tokenSeparators
        self.enableNestedFields = enableNestedFields
        self.symbolsToIndex = symbolsToIndex
        self.voiceQueryModel = voiceQueryModel
        self.numDocuments = numDocuments
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case fields
        case defaultSortingField = "default_sorting_field"
        case tokenSeparators = "token_separators"
        case enableNestedFields = "enable_nested_fields"
        case symbolsToIndex = "symbols_to_index"
        case voiceQueryModel = "voice_query_model"
        case numDocuments = "num_documents"
        case createdAt = "created_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(fields, forKey: .fields)
        try container.encodeIfPresent(defaultSortingField, forKey: .defaultSortingField)
        try container.encodeIfPresent(tokenSeparators, forKey: .tokenSeparators)
        try container.encodeIfPresent(enableNestedFields, forKey: .enableNestedFields)
        try container.encodeIfPresent(symbolsToIndex, forKey: .symbolsToIndex)
        try container.encodeIfPresent(voiceQueryModel, forKey: .voiceQueryModel)
        try container.encode(numDocuments, forKey: .numDocuments)
        try container.encode(createdAt, forKey: .createdAt)
    }
}

