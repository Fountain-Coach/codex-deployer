//
// SearchHighlight.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SearchHighlight: Sendable, Codable, ParameterConvertible, Hashable {

    public var field: String?
    /** Present only for (non-array) string fields */
    public var snippet: String?
    /** Present only for (array) string[] fields */
    public var snippets: [String]?
    /** Full field value with highlighting, present only for (non-array) string fields */
    public var value: String?
    /** Full field value with highlighting, present only for (array) string[] fields */
    public var values: [String]?
    /** The indices property will be present only for string[] fields and will contain the corresponding indices of the snippets in the search field */
    public var indices: [Int]?
    public var matchedTokens: [JSONValue]?

    public init(field: String? = nil, snippet: String? = nil, snippets: [String]? = nil, value: String? = nil, values: [String]? = nil, indices: [Int]? = nil, matchedTokens: [JSONValue]? = nil) {
        self.field = field
        self.snippet = snippet
        self.snippets = snippets
        self.value = value
        self.values = values
        self.indices = indices
        self.matchedTokens = matchedTokens
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case field
        case snippet
        case snippets
        case value
        case values
        case indices
        case matchedTokens = "matched_tokens"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(field, forKey: .field)
        try container.encodeIfPresent(snippet, forKey: .snippet)
        try container.encodeIfPresent(snippets, forKey: .snippets)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(values, forKey: .values)
        try container.encodeIfPresent(indices, forKey: .indices)
        try container.encodeIfPresent(matchedTokens, forKey: .matchedTokens)
    }
}

