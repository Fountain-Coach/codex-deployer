//
// SearchResultHit.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SearchResultHit: Sendable, Codable, ParameterConvertible, Hashable {

    /** (Deprecated) Contains highlighted portions of the search fields */
    public var highlights: [SearchHighlight]?
    /** Highlighted version of the matching document */
    public var highlight: [String: JSONValue]?
    /** Can be any key-value pair */
    public var document: [String: JSONValue]?
    public var textMatch: Int64?
    public var textMatchInfo: SearchResultHitTextMatchInfo?
    /** Can be any key-value pair */
    public var geoDistanceMeters: [String: Int]?
    /** Distance between the query vector and matching document's vector value */
    public var vectorDistance: Float?

    public init(highlights: [SearchHighlight]? = nil, highlight: [String: JSONValue]? = nil, document: [String: JSONValue]? = nil, textMatch: Int64? = nil, textMatchInfo: SearchResultHitTextMatchInfo? = nil, geoDistanceMeters: [String: Int]? = nil, vectorDistance: Float? = nil) {
        self.highlights = highlights
        self.highlight = highlight
        self.document = document
        self.textMatch = textMatch
        self.textMatchInfo = textMatchInfo
        self.geoDistanceMeters = geoDistanceMeters
        self.vectorDistance = vectorDistance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case highlights
        case highlight
        case document
        case textMatch = "text_match"
        case textMatchInfo = "text_match_info"
        case geoDistanceMeters = "geo_distance_meters"
        case vectorDistance = "vector_distance"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(highlights, forKey: .highlights)
        try container.encodeIfPresent(highlight, forKey: .highlight)
        try container.encodeIfPresent(document, forKey: .document)
        try container.encodeIfPresent(textMatch, forKey: .textMatch)
        try container.encodeIfPresent(textMatchInfo, forKey: .textMatchInfo)
        try container.encodeIfPresent(geoDistanceMeters, forKey: .geoDistanceMeters)
        try container.encodeIfPresent(vectorDistance, forKey: .vectorDistance)
    }
}

